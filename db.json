{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/indigo/source/css/style.less","path":"css/style.less","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/brand.jpg","path":"img/brand.jpg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/cc.png","path":"img/cc.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-err.png","path":"img/img-err.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/img-loading.png","path":"img/img-loading.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","path":"css/fonts/roboto/Roboto-Bold.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","path":"css/fonts/roboto/Roboto-Bold.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","path":"css/fonts/roboto/Roboto-Bold.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","path":"css/fonts/roboto/Roboto-Light.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","path":"css/fonts/roboto/Roboto-Light.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","path":"css/fonts/roboto/Roboto-Light.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","path":"css/fonts/roboto/Roboto-Medium.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","path":"css/fonts/roboto/Roboto-Medium.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","path":"css/fonts/roboto/Roboto-Medium.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","path":"css/fonts/roboto/Roboto-Regular.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","path":"css/fonts/roboto/Roboto-Regular.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","path":"css/fonts/roboto/Roboto-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","path":"css/fonts/roboto/Roboto-Thin.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","path":"css/fonts/roboto/Roboto-Thin.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","path":"css/fonts/roboto/Roboto-Thin.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","path":"css/fonts/fontawesome/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","path":"css/fonts/fontawesome/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","path":"css/fonts/fontawesome/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","path":"css/fonts/fontawesome/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","path":"css/fonts/roboto/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","path":"css/fonts/roboto/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","path":"css/fonts/roboto/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","path":"css/fonts/roboto/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","path":"css/fonts/roboto/Roboto-Thin.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","path":"css/fonts/fontawesome/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","path":"css/fonts/fontawesome/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/indigo/source/img/favicon.ico","path":"img/favicon.ico","modified":0,"renderable":1},{"_id":"themes/indigo/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1}],"Cache":[{"_id":"themes/indigo/README.md","hash":"7666c83e3b7ba083723a7a37ad86e614ef6d0985","modified":1457327005266},{"_id":"themes/indigo/_config.yml","hash":"ff529d03f44f80a2009051c0bc47b24e359b8384","modified":1457327005267},{"_id":"themes/indigo/package.json","hash":"9c9d90b83a204a42178f6057c8c252c3af07a92e","modified":1457327005289},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1456927911000},{"_id":"themes/indigo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1456714851795},{"_id":"themes/indigo/.git/config","hash":"eb61f1f296ad2f17b5b8fcb825f470866c463bb7","modified":1456714851800},{"_id":"themes/indigo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1456714824161},{"_id":"themes/indigo/.git/index","hash":"b233f1dcbc3a9c6b9c846d4794d90d48b647ed2d","modified":1456714851854},{"_id":"themes/indigo/.git/packed-refs","hash":"a619b9234890342c2cff504ba4aa8dbd270f0db8","modified":1456714851780},{"_id":"themes/indigo/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1456714851812},{"_id":"themes/indigo/layout/category.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1456714851812},{"_id":"themes/indigo/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1456714851813},{"_id":"themes/indigo/layout/layout.ejs","hash":"42349777b0a546b88ed50ae995f5b34c1c734877","modified":1457327005285},{"_id":"themes/indigo/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1456714851813},{"_id":"themes/indigo/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1456714851814},{"_id":"themes/indigo/layout/tag.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1456714851815},{"_id":"themes/indigo/screenshots/hexo-theme-pad.png","hash":"d7c897b32e7eab0146bb2530433c9b8b7571d59c","modified":1456714851817},{"_id":"themes/indigo/screenshots/hexo-theme-phone-1.png","hash":"9b30409ec4c9b94b5582346323ed2c8e26dbc4c0","modified":1456714851820},{"_id":"themes/indigo/screenshots/hexo-theme-phone-2.png","hash":"b6807228992222a8fa095a940a41f40f841a5f6e","modified":1456714851821},{"_id":"themes/indigo/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1456714824161},{"_id":"themes/indigo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1456714824162},{"_id":"themes/indigo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1456714824162},{"_id":"themes/indigo/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1456714824163},{"_id":"themes/indigo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1456714824163},{"_id":"themes/indigo/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1456714824163},{"_id":"themes/indigo/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1456714824164},{"_id":"themes/indigo/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1456714824164},{"_id":"themes/indigo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1456714824164},{"_id":"themes/indigo/.git/logs/HEAD","hash":"9eacbc9ffe68e1d5f95fe832854d02ed8a3d5c0c","modified":1456714851797},{"_id":"themes/indigo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1456714824165},{"_id":"themes/indigo/layout/_partial/after-footer.ejs","hash":"aa21e3522d23938e805a3658d456a3636502c301","modified":1457327005268},{"_id":"themes/indigo/layout/_partial/archive-post.ejs","hash":"30f2db93230675cd9bc45ce5bd9cbc8bf270f983","modified":1457327005268},{"_id":"themes/indigo/layout/_partial/archive.ejs","hash":"d38648a2848e797db5d10fe5e1ade731285de5da","modified":1457327005268},{"_id":"themes/indigo/layout/_partial/article.ejs","hash":"c54b6ffea327fb37f1f74bcb44bf076d55d49423","modified":1457327005269},{"_id":"themes/indigo/layout/_partial/cnzz.ejs","hash":"dbee64698919aeaeb0923c44b3f8c5402c7b8fed","modified":1457327005269},{"_id":"themes/indigo/layout/_partial/footer.ejs","hash":"b25d13571c1d7cd77ef8642d3803164fe82cfda4","modified":1457327005269},{"_id":"themes/indigo/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1457327005275},{"_id":"themes/indigo/layout/_partial/head.ejs","hash":"958a760a9400c204b06c3327e691e0a827a971b1","modified":1457327005276},{"_id":"themes/indigo/layout/_partial/loading.ejs","hash":"8b3e037dd5f3d4564012689c5cd6f63caf73df0f","modified":1457327005277},{"_id":"themes/indigo/layout/_partial/header.ejs","hash":"cfb7d1016ad9a519483c404290eee722c4625b65","modified":1457327005276},{"_id":"themes/indigo/layout/_partial/left-col.ejs","hash":"0f1a1f00b0baaba5c266af40de1e8ba69a71aa9d","modified":1457327005277},{"_id":"themes/indigo/layout/_partial/mathjax.ejs","hash":"c539b64a558513136f36a36ab1246a7884a59167","modified":1457327005277},{"_id":"themes/indigo/layout/_partial/script.ejs","hash":"28ec2ae3e8ff9356e5c9f20f7721b9418885c2ca","modified":1457327005284},{"_id":"themes/indigo/source/css/style.less","hash":"1d6490c9e956140574ac910b4d3552343cb93476","modified":1457327005432},{"_id":"themes/indigo/source/img/brand.jpg","hash":"f86bc62db55040934b524a34624e55c552e6245f","modified":1456696345000},{"_id":"themes/indigo/source/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1456714851852},{"_id":"themes/indigo/source/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1456714851852},{"_id":"themes/indigo/source/img/logo.jpg","hash":"a089e42acab93864d33e16801b0ac5dc1617c373","modified":1456714851853},{"_id":"themes/indigo/source/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1456714851852},{"_id":"themes/indigo/source/js/main.js","hash":"214cd2079bba06cc583c49df80fbf1b9f687a19c","modified":1457327005473},{"_id":"themes/indigo/screenshots/hexo-theme-pc.png","hash":"497742866f4b550c05e9cb0d353c08b4f9e9d171","modified":1456714851819},{"_id":"themes/indigo/.git/objects/pack/pack-092e74cd85b32bdcbc19847c2cd9db76c252062e.idx","hash":"2365335037dfe48a1a6f9b213f1edaa2e2626113","modified":1456714851031},{"_id":"themes/indigo/.git/refs/heads/master","hash":"7f9ecf3663dbc3d179540d30c18bb25d64b49930","modified":1456714851796},{"_id":"themes/indigo/layout/_partial/post/category.ejs","hash":"27fab3e6ccc41c075dc4c5ba3ca9e7f3b6247945","modified":1457327005278},{"_id":"themes/indigo/layout/_partial/post/date.ejs","hash":"d388863c3fbdbaadce38a3dd33d7a537b14b8b82","modified":1457327005278},{"_id":"themes/indigo/layout/_partial/post/duoshuo.ejs","hash":"f6b4c4eaafb5ac386273354b5f64a26139b7a3b0","modified":1457327005278},{"_id":"themes/indigo/layout/_partial/post/nav.ejs","hash":"976b970a6a1f6140a1a1b30a335588ad9af72319","modified":1457327005279},{"_id":"themes/indigo/layout/_partial/post/share.ejs","hash":"d09cd22c2985f9e8a712970deb3a9d8290cc9108","modified":1457327005279},{"_id":"themes/indigo/layout/_partial/post/tag.ejs","hash":"60139e37b41769d218e5cf6f6040c41bd2293728","modified":1457327005279},{"_id":"themes/indigo/layout/_partial/post/tags.ejs","hash":"f8e019f8183fc1771f18e344029bc8ecb86272e0","modified":1457327005283},{"_id":"themes/indigo/layout/_partial/post/title.ejs","hash":"47967f75b47c7fac22432a3d75c6978081ccd1cd","modified":1457327005283},{"_id":"themes/indigo/source/css/_partial/archives.less","hash":"70792112a5d220416f136c161438f1959540d7bb","modified":1457327005295},{"_id":"themes/indigo/source/css/_partial/article.less","hash":"76d9ee4e5f838848b5d7426e396add1ea60ec4bc","modified":1457327005296},{"_id":"themes/indigo/source/css/_partial/fontawesome.less","hash":"e224c01e7528d3daa1f98df583ea6c49ba52d43a","modified":1457327005296},{"_id":"themes/indigo/source/css/_partial/gotop.less","hash":"bad63006b3bd4849bf53ad38482af0d9971061d3","modified":1457327005297},{"_id":"themes/indigo/source/css/_partial/header.less","hash":"9398ee93315299aeb8144c0958e899f4ffea96d5","modified":1457327005297},{"_id":"themes/indigo/source/css/_partial/highlight.less","hash":"2bb977cd0b66e1237cb746e03b50c7db9940a98a","modified":1457327005297},{"_id":"themes/indigo/source/css/_partial/loading.less","hash":"0361039b2abdeb1b41e504fa437df962cda055d2","modified":1457327005303},{"_id":"themes/indigo/source/css/_partial/postlist.less","hash":"54a4553f6d2aac95d29285603d91a3a86d5fad99","modified":1457327005304},{"_id":"themes/indigo/source/css/_partial/layout.less","hash":"e442d62898e1fc455524ca03ba35a582ae8612f8","modified":1457327005303},{"_id":"themes/indigo/source/css/_partial/share.less","hash":"5c830c4b6a5c263acfc342f6e669b117a2745f81","modified":1457327005305},{"_id":"themes/indigo/source/css/_partial/roboto.less","hash":"3e457942995da8840e7662fa6cb551a7e12ea294","modified":1457327005304},{"_id":"themes/indigo/source/css/_partial/tags.less","hash":"36e77ccb39b080aab19d9d87fd20882d5ac84ee9","modified":1457327005305},{"_id":"themes/indigo/source/css/_partial/waves.less","hash":"a8b41b0b0c8ff2f6cf95f7f9784611dd8c212ffe","modified":1457327005306},{"_id":"themes/indigo/source/css/_partial/variable.less","hash":"6a960949f6249a41d5b9abb07a8b40d523003128","modified":1457327005306},{"_id":"themes/indigo/.git/logs/refs/heads/master","hash":"9eacbc9ffe68e1d5f95fe832854d02ed8a3d5c0c","modified":1456714851797},{"_id":"themes/indigo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1456714851791},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1456714851836},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1456714851837},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1456714851838},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1456714851839},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1456714851840},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1456714851841},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1456714851841},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1456714851843},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1456714851844},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1456714851844},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1456714851846},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1456714851847},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1456714851847},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1456714851850},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1456714851849},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1456714851830},{"_id":"themes/indigo/source/css/fonts/fontawesome/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1456714851829},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1456714851834},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1456714851835},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1456714851837},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1456714851840},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1456714851842},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1456714851845},{"_id":"themes/indigo/source/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1456714851849},{"_id":"themes/indigo/.git/logs/refs/remotes/origin/HEAD","hash":"9eacbc9ffe68e1d5f95fe832854d02ed8a3d5c0c","modified":1456714851795},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1456714851833},{"_id":"themes/indigo/source/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1457327005311},{"_id":"themes/indigo/.git/objects/pack/pack-092e74cd85b32bdcbc19847c2cd9db76c252062e.pack","hash":"67a5a410e81012091b54ae6c71883a49b680027c","modified":1456714851401},{"_id":"public/2016/02/29/hello-world/index.html","hash":"970b510e6cc09d164668d3287c9002be3920ad59","modified":1456725320691},{"_id":"public/archives/index.html","hash":"08feda7bd726a891a915d3fa40259c0610da4e49","modified":1457332798311},{"_id":"public/archives/2016/index.html","hash":"409d786a79caa6424a43988c5cd402651ba80a10","modified":1457332798311},{"_id":"public/index.html","hash":"fc9bd80643d485859cd3bdb52a7f1b92dfead909","modified":1457332798312},{"_id":"public/archives/2016/02/index.html","hash":"2ab94b18090dd42c467458b7103adb58349bd77d","modified":1456725320692},{"_id":"public/img/cc.png","hash":"ebce75a62b40976a72d43f0bd937d859ac24d87c","modified":1457332798323},{"_id":"public/img/brand.jpg","hash":"f86bc62db55040934b524a34624e55c552e6245f","modified":1457332798358},{"_id":"public/img/img-err.png","hash":"23a63ea26eb3c1d5e677d9883cf36cc1a1a1228b","modified":1457332798323},{"_id":"public/img/logo.jpg","hash":"a089e42acab93864d33e16801b0ac5dc1617c373","modified":1456714898089},{"_id":"public/img/img-loading.png","hash":"a9cd5cd11866824f31e3d1c5e23badfeb3f73031","modified":1457332798323},{"_id":"public/css/fonts/roboto/Roboto-Bold.eot","hash":"a76cd602f5188b9fbd4ba7443dcb9c064e3dbf10","modified":1457332798323},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff","hash":"ee99cd87a59a9a5d4092c83232bb3eec67547425","modified":1457332798323},{"_id":"public/css/fonts/roboto/Roboto-Bold.woff2","hash":"933b866d09c2b087707a98dab64b3888865eeb96","modified":1457332798323},{"_id":"public/css/fonts/roboto/Roboto-Light.eot","hash":"42fe156996197e5eb0c0264c5d1bb3b4681f4595","modified":1457332798323},{"_id":"public/css/fonts/roboto/Roboto-Light.woff","hash":"6300f659be9e834ab263efe2fb3c581d48b1e7b2","modified":1457332798323},{"_id":"public/css/fonts/roboto/Roboto-Light.woff2","hash":"bbdc28b887400fcb340b504ec2904993af42a5d7","modified":1457332798323},{"_id":"public/css/fonts/roboto/Roboto-Medium.eot","hash":"1517f4b6e1c5d0e5198f937557253aac8fab0416","modified":1457332798323},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff","hash":"d45f84922131364989ad6578c7a06b6b4fc22c34","modified":1457332798323},{"_id":"public/css/fonts/roboto/Roboto-Medium.woff2","hash":"6cc1b73571af9e827c4e7e91418f476703cd4c4b","modified":1457332798324},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff","hash":"74734dde8d94e7268170f9b994dedfbdcb5b3a15","modified":1457332798324},{"_id":"public/css/fonts/roboto/Roboto-Regular.eot","hash":"77ae3e980ec03863ebe2587a8ef9ddfd06941db0","modified":1457332798324},{"_id":"public/css/fonts/roboto/Roboto-Regular.woff2","hash":"ed1558b0541f5e01ce48c7db1588371b990eec19","modified":1457332798324},{"_id":"public/css/fonts/roboto/Roboto-Thin.eot","hash":"0790a51a848dbe7292c98f9d0459218bf1a8ffdd","modified":1457332798324},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff2","hash":"2449e3dac5ddb7c3da8bb07450493b62d052758c","modified":1457332798324},{"_id":"public/css/fonts/roboto/Roboto-Thin.woff","hash":"fbc3e71d456c96667d8082ab910e3946ef89240b","modified":1457332798324},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.eot","hash":"986eed8dca049714e43eeebcb3932741a4bec76d","modified":1457332798358},{"_id":"public/css/fonts/fontawesome/FontAwesome.otf","hash":"42c179eef588854b5ec151bcf6a3f58aa8b79b11","modified":1457332798359},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff","hash":"4a313eb93b959cc4154c684b915b0a31ddb68d84","modified":1457332798360},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1457332798360},{"_id":"public/css/fonts/roboto/Roboto-Bold.ttf","hash":"47327df0f35e7cd7c8645874897a7449697544ae","modified":1457332798360},{"_id":"public/css/fonts/roboto/Roboto-Light.ttf","hash":"e321c183e2b75ee19813892b7bac8d7c411cb88a","modified":1457332798360},{"_id":"public/css/fonts/roboto/Roboto-Medium.ttf","hash":"6060ca726b9760b76f7c347dce9d2fa1fe42ec92","modified":1457332798360},{"_id":"public/css/fonts/roboto/Roboto-Regular.ttf","hash":"824b5480c977a8166e177e5357d13164ccc45f47","modified":1457332798361},{"_id":"public/css/fonts/roboto/Roboto-Thin.ttf","hash":"173ed64528b4d010a76d8d38deb1d7e7eed58eda","modified":1457332798361},{"_id":"public/js/main.js","hash":"4ce291d60161e2a0c8176ebd94e9f03ac648467e","modified":1457332798366},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.ttf","hash":"6484f1af6b485d5096b71b344e67f4164c33dd1f","modified":1457332798366},{"_id":"public/css/fonts/fontawesome/fontawesome-webfont.svg","hash":"550ef5c1253c8376f2ead32b654eb58d3c106ca3","modified":1457332798386},{"_id":"public/css/style.css","hash":"6708de8d61bcc6163174ac50efd21f7523ed903c","modified":1457332798625},{"_id":"themes/indigo/source/img/facicon.ico","hash":"2fe7741fee10e9016740bc4243d140a9fe706b0a","modified":1456713144403},{"_id":"themes/indigo/source/img/avatar.png","hash":"37946615e6cf6976b8e24fa6a089f89dfe1f4371","modified":1456696345000},{"_id":"public/img/facicon.ico","hash":"2fe7741fee10e9016740bc4243d140a9fe706b0a","modified":1456715266681},{"_id":"public/img/avatar.png","hash":"37946615e6cf6976b8e24fa6a089f89dfe1f4371","modified":1457332798375},{"_id":"themes/indigo/source/img/favicon.ico","hash":"2fe7741fee10e9016740bc4243d140a9fe706b0a","modified":1456713144403},{"_id":"public/img/favicon.ico","hash":"2fe7741fee10e9016740bc4243d140a9fe706b0a","modified":1457332798324},{"_id":"themes/indigo/favicon.ico","hash":"2fe7741fee10e9016740bc4243d140a9fe706b0a","modified":1456713144403},{"_id":"source/tags/index.md","hash":"34834066ebeca680acabc07f2049e291309a2e43","modified":1456717443011},{"_id":"public/tags/index.html","hash":"ce87cc0c0fa478639cc26aa9f1ff7ca7314cef99","modified":1457332798310},{"_id":"themes/indigo/source/favicon.ico","hash":"2fe7741fee10e9016740bc4243d140a9fe706b0a","modified":1456713144403},{"_id":"public/favicon.ico","hash":"2fe7741fee10e9016740bc4243d140a9fe706b0a","modified":1457332798324},{"_id":"themes/indigo/source/favicon.png","hash":"998380c9674dd438cc0468fac935ce92cb7e301b","modified":1456720611482},{"_id":"public/favicon.png","hash":"998380c9674dd438cc0468fac935ce92cb7e301b","modified":1456720690249},{"_id":"public/2016/03/02/hello-world/index.html","hash":"6f9755c8568cbebab15a468584da8bd4cae32a76","modified":1456927945909},{"_id":"public/archives/2016/03/index.html","hash":"0136071f52ee7a8e486563f371f86b88134d8b13","modified":1457332798311},{"_id":"source/.DS_Store","hash":"9a8513302ec078c6fa024e344da84ffcf1698026","modified":1456929254000},{"_id":"source/_posts/开山第一篇.md","hash":"2beac7e8f1d38c9eabcfeb06c7080bb6667c78c1","modified":1457331672388},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1456929183000},{"_id":"public/2016/03/02/开山第一篇/index.html","hash":"0f0aa44e251d897f926f6886086c68ee8006cd8e","modified":1457331471712},{"_id":"public/tags/杂/index.html","hash":"687dab6ce4198de882c2c6ba222f639747c99fde","modified":1457332798313},{"_id":"source/_posts/英雄联盟中的随机行为优化.md","hash":"a61b0cbf2565df764789e2a87fec1df07ff80d5c","modified":1457332870956},{"_id":"public/tags/翻译/index.html","hash":"b6b916eac943ef3f7d122677cb3e4660534408aa","modified":1457332798313},{"_id":"public/2016/03/02/英雄联盟中的随机行为优化/index.html","hash":"c2eba761725f987214fb890390e9b3d813bd4a7d","modified":1457329636111},{"_id":"public/2016/03/07/英雄联盟中的随机行为优化/index.html","hash":"f8f29fc3ba545aa7134c224167f1aa748f6b7ffa","modified":1457332880454},{"_id":"public/2016/03/03/开山第一篇/index.html","hash":"5537860da3adb8b7f2fde6d9e0ab85bf0ccbd4da","modified":1457332798310}],"Category":[],"Data":[],"Page":[{"type":"tags","noDate":true,"comments":0,"_content":"","source":"tags/index.md","raw":"type: \"tags\"\nnoDate: true\ncomments: false\n---","date":"2016-02-29T03:44:03.011Z","updated":"2016-02-29T03:44:03.011Z","path":"tags/index.html","_id":"cil7fy6vz00007whllozu6e81","title":"","layout":"page","content":"","excerpt":"","more":""}],"Post":[{"title":"开山第一篇","date":"2016-03-03T01:30:24.000Z","_content":"\n## 关于博客\n\n用过好多博客，如Cnblog、CSDN、ITeye等等，后来觉得用Github更Geek一点，于是学习[gizak](https://github.com/gizak)搞了一个[介个](https://2hf.github.io/)。后来，在[郭师哥](https://guojianxiang.com/)的怂恿下，搞了台阿里云主机把玩，因为有之前的经验，所以比较愉快选择了[Hexo](http://hexo.io/)来搭建自己的博客。拖延了好久，上周末终于下定决心好好弄一弄。\n<!--more-->\n\nHexo的主题十分丰富，官方的主题向[这里(自备梯子)](https://hexo.io/themes/)看齐。至于我，选用的是[indigo](https://github.com/yscoder/hexo-theme-indigo)，因为Material Design的风格很舒服，而且移动设备适配也很好，功能基本满足，个性化定制也方便（主要是修改起来方便……_(:3 」∠)_）。刚搭建完成的时候，我将整个博客的源码都放在了GitHub上面，看[这个项目](https://github.com/2hf/elbarco.cn/tree/dev)，`dev`分支是备份，`master`分支是第一次生成的博客内容。Feel free to build your own blog based on that.\n\n## 关于我\n\n90后，男，单身狗，程序猿。目前帝都某创业型互联网公司就职，云计算相关的Java攻城狮，所以到底是🐶还是🦁️，傻傻分不清楚。喜欢做技术，热爱互联网，拥抱开源。一个人惯了，也爱宅。爱好十分广泛，美剧、电影、音乐、旅行、折腾。其他关键字，强迫症（尽管我是射手座不是处女座）、轻微人格分裂、偶尔犯二……各位看官，随便感受下就好。这里的我，无关紧要。\n\n## 关于域名\n\n目前域名为`0x4b5.top`，数字表示了我的生日，无他。正在备案的域名`elbarco.cn`，通过后将正式启用。`El barco`（音译：埃尔巴科），西班牙语`船`的意思，朋友们喊我`小船`，估计是因为我是`张帆`。家人取的这名重名率极高，选个域名无从下手，所以才想到了用`El barco`，BTW，本域名与什么`elbarco.com`毫无关系，特此声明。也希望在这里，我能做那沉舟侧畔千帆中的一员，有所分享，有所进步。\n\n最后，感谢各位看官老爷。\n\n","source":"_posts/开山第一篇.md","raw":"---\ntitle: 开山第一篇\ndate: 2016-03-03 09:30:24\ntags: 杂\n---\n\n## 关于博客\n\n用过好多博客，如Cnblog、CSDN、ITeye等等，后来觉得用Github更Geek一点，于是学习[gizak](https://github.com/gizak)搞了一个[介个](https://2hf.github.io/)。后来，在[郭师哥](https://guojianxiang.com/)的怂恿下，搞了台阿里云主机把玩，因为有之前的经验，所以比较愉快选择了[Hexo](http://hexo.io/)来搭建自己的博客。拖延了好久，上周末终于下定决心好好弄一弄。\n<!--more-->\n\nHexo的主题十分丰富，官方的主题向[这里(自备梯子)](https://hexo.io/themes/)看齐。至于我，选用的是[indigo](https://github.com/yscoder/hexo-theme-indigo)，因为Material Design的风格很舒服，而且移动设备适配也很好，功能基本满足，个性化定制也方便（主要是修改起来方便……_(:3 」∠)_）。刚搭建完成的时候，我将整个博客的源码都放在了GitHub上面，看[这个项目](https://github.com/2hf/elbarco.cn/tree/dev)，`dev`分支是备份，`master`分支是第一次生成的博客内容。Feel free to build your own blog based on that.\n\n## 关于我\n\n90后，男，单身狗，程序猿。目前帝都某创业型互联网公司就职，云计算相关的Java攻城狮，所以到底是🐶还是🦁️，傻傻分不清楚。喜欢做技术，热爱互联网，拥抱开源。一个人惯了，也爱宅。爱好十分广泛，美剧、电影、音乐、旅行、折腾。其他关键字，强迫症（尽管我是射手座不是处女座）、轻微人格分裂、偶尔犯二……各位看官，随便感受下就好。这里的我，无关紧要。\n\n## 关于域名\n\n目前域名为`0x4b5.top`，数字表示了我的生日，无他。正在备案的域名`elbarco.cn`，通过后将正式启用。`El barco`（音译：埃尔巴科），西班牙语`船`的意思，朋友们喊我`小船`，估计是因为我是`张帆`。家人取的这名重名率极高，选个域名无从下手，所以才想到了用`El barco`，BTW，本域名与什么`elbarco.com`毫无关系，特此声明。也希望在这里，我能做那沉舟侧畔千帆中的一员，有所分享，有所进步。\n\n最后，感谢各位看官老爷。\n\n","slug":"开山第一篇","published":1,"updated":"2016-03-07T06:21:12.388Z","_id":"cilay2b4q0000lvmztlmf5lji","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h2><p>用过好多博客，如Cnblog、CSDN、ITeye等等，后来觉得用Github更Geek一点，于是学习<a href=\"https://github.com/gizak\" target=\"_blank\" rel=\"external\">gizak</a>搞了一个<a href=\"https://2hf.github.io/\" target=\"_blank\" rel=\"external\">介个</a>。后来，在<a href=\"https://guojianxiang.com/\" target=\"_blank\" rel=\"external\">郭师哥</a>的怂恿下，搞了台阿里云主机把玩，因为有之前的经验，所以比较愉快选择了<a href=\"http://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>来搭建自己的博客。拖延了好久，上周末终于下定决心好好弄一弄。<br><a id=\"more\"></a></p>\n<p>Hexo的主题十分丰富，官方的主题向<a href=\"https://hexo.io/themes/\" target=\"_blank\" rel=\"external\">这里(自备梯子)</a>看齐。至于我，选用的是<a href=\"https://github.com/yscoder/hexo-theme-indigo\" target=\"_blank\" rel=\"external\">indigo</a>，因为Material Design的风格很舒服，而且移动设备适配也很好，功能基本满足，个性化定制也方便（主要是修改起来方便……<em>(:3 」∠)</em>）。刚搭建完成的时候，我将整个博客的源码都放在了GitHub上面，看<a href=\"https://github.com/2hf/elbarco.cn/tree/dev\" target=\"_blank\" rel=\"external\">这个项目</a>，<code>dev</code>分支是备份，<code>master</code>分支是第一次生成的博客内容。Feel free to build your own blog based on that.</p>\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>90后，男，单身狗，程序猿。目前帝都某创业型互联网公司就职，云计算相关的Java攻城狮，所以到底是🐶还是🦁️，傻傻分不清楚。喜欢做技术，热爱互联网，拥抱开源。一个人惯了，也爱宅。爱好十分广泛，美剧、电影、音乐、旅行、折腾。其他关键字，强迫症（尽管我是射手座不是处女座）、轻微人格分裂、偶尔犯二……各位看官，随便感受下就好。这里的我，无关紧要。</p>\n<h2 id=\"关于域名\"><a href=\"#关于域名\" class=\"headerlink\" title=\"关于域名\"></a>关于域名</h2><p>目前域名为<code>0x4b5.top</code>，数字表示了我的生日，无他。正在备案的域名<code>elbarco.cn</code>，通过后将正式启用。<code>El barco</code>（音译：埃尔巴科），西班牙语<code>船</code>的意思，朋友们喊我<code>小船</code>，估计是因为我是<code>张帆</code>。家人取的这名重名率极高，选个域名无从下手，所以才想到了用<code>El barco</code>，BTW，本域名与什么<code>elbarco.com</code>毫无关系，特此声明。也希望在这里，我能做那沉舟侧畔千帆中的一员，有所分享，有所进步。</p>\n<p>最后，感谢各位看官老爷。</p>\n","excerpt":"<h2 id=\"关于博客\"><a href=\"#关于博客\" class=\"headerlink\" title=\"关于博客\"></a>关于博客</h2><p>用过好多博客，如Cnblog、CSDN、ITeye等等，后来觉得用Github更Geek一点，于是学习<a href=\"https://github.com/gizak\">gizak</a>搞了一个<a href=\"https://2hf.github.io/\">介个</a>。后来，在<a href=\"https://guojianxiang.com/\">郭师哥</a>的怂恿下，搞了台阿里云主机把玩，因为有之前的经验，所以比较愉快选择了<a href=\"http://hexo.io/\">Hexo</a>来搭建自己的博客。拖延了好久，上周末终于下定决心好好弄一弄。<br>","more":"</p>\n<p>Hexo的主题十分丰富，官方的主题向<a href=\"https://hexo.io/themes/\">这里(自备梯子)</a>看齐。至于我，选用的是<a href=\"https://github.com/yscoder/hexo-theme-indigo\">indigo</a>，因为Material Design的风格很舒服，而且移动设备适配也很好，功能基本满足，个性化定制也方便（主要是修改起来方便……<em>(:3 」∠)</em>）。刚搭建完成的时候，我将整个博客的源码都放在了GitHub上面，看<a href=\"https://github.com/2hf/elbarco.cn/tree/dev\">这个项目</a>，<code>dev</code>分支是备份，<code>master</code>分支是第一次生成的博客内容。Feel free to build your own blog based on that.</p>\n<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>90后，男，单身狗，程序猿。目前帝都某创业型互联网公司就职，云计算相关的Java攻城狮，所以到底是🐶还是🦁️，傻傻分不清楚。喜欢做技术，热爱互联网，拥抱开源。一个人惯了，也爱宅。爱好十分广泛，美剧、电影、音乐、旅行、折腾。其他关键字，强迫症（尽管我是射手座不是处女座）、轻微人格分裂、偶尔犯二……各位看官，随便感受下就好。这里的我，无关紧要。</p>\n<h2 id=\"关于域名\"><a href=\"#关于域名\" class=\"headerlink\" title=\"关于域名\"></a>关于域名</h2><p>目前域名为<code>0x4b5.top</code>，数字表示了我的生日，无他。正在备案的域名<code>elbarco.cn</code>，通过后将正式启用。<code>El barco</code>（音译：埃尔巴科），西班牙语<code>船</code>的意思，朋友们喊我<code>小船</code>，估计是因为我是<code>张帆</code>。家人取的这名重名率极高，选个域名无从下手，所以才想到了用<code>El barco</code>，BTW，本域名与什么<code>elbarco.com</code>毫无关系，特此声明。也希望在这里，我能做那沉舟侧畔千帆中的一员，有所分享，有所进步。</p>\n<p>最后，感谢各位看官老爷。</p>"},{"title":"英雄联盟中的随机行为优化","date":"2016-03-07T05:48:24.000Z","_content":"> 原文地址：[传送门](http://engineering.riotgames.com/news/random-acts-optimization)\n> 原创翻译，转载请注明出处\n\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/particlesheader2.png)\n\n对于像英雄联盟这样不断演进的产品的开发者而言，需要不断的致力于与系统的熵作斗争，因为他们将越来越多的内容添加到资源有限的服务器中。新的内容带了新的隐性成本——不仅是更多的实施成本，同时也包括由于创造了更多的纹理、仿真和处理造成的内存和性能成本。如果我们忽略（或者错误估算）了这些成本，则整体游戏性能不佳，可玩性减少。故障使人厌恶，延迟使人愤怒，帧率下降让人沮丧。\n<!--more-->\n\n我是致力于提高英雄联盟性能团队中的一员。我们为客户端和服务器做快照，发现问题 (性能相关和其他)，然后修复问题。同时，我们将在这个过程中学到的东西反馈其他团队，并且给他们提供工具，使他们在影响用户之前来检测并定位他们自己的性能问题。我们不断的提高英雄联盟的性能为艺术家和设计师添加新的东西提供了空间：当他们使游戏更庞大更优秀的同时，我们使之更快。\n\n这是关于我们团队如何优化英雄联盟性能系列的第一篇文章，后续我们将不断持续更新。这是一项回报丰厚的挑战，这篇文章将深入介绍我们在粒子系统中遇到的一些有趣的挑战——正如在下图中，你可以看到粒子系统在游戏中扮演了十分重要的角色。\n\n![GIF图](http://7xrgsx.com1.z0.glb.clouddn.com/TeamParticles.gif)\n\n上图是在英雄联盟游戏中高粒子密度的一个例子。\n\n优化，并不是在程序集中重写大量的代码——尽管有些时候是这样的。我们仅变更那些不仅能够提高性能，而且维护正确性的代码，如果有可能的话，还会提高代码质量。最后一项略显挑剔：任何不易读、不易维护的代码都会产生技术债务，这个我们稍后再谈。\n\n优化已有的代码库，我们采用了三个基本步骤：鉴别、理解和迭代。\n\n*步骤一：鉴别*\n\n在开始之前，我们首先需要确认哪些代码需要进行优化。即使有些代码看起来明显性能较差，但是由于其对整体性能影响极小，优化这类代码收益极少（尤其当花费在上面的时间和精力在其他方面可以做到更好的收益）。我们使用代码检测工具和采样分析器来帮助识别非性能部分的基本代码。\n\n*步骤二：理解*\n\n一旦我们得知代码库的哪部分代码性能较差，我们便会详细的查看这部分代码以求完全理解代码。理解代码意味着理解这些代码的含义及原本的目的。接着，我们就能知悉为何这些代码产生瓶颈了。\n\n*步骤三：迭代*\n\n当我们理解了为何特定部分代码执行较慢及代码本意要执行的内容，我们就有了足够的信息来设计和开发一套可行的解决方案。使用鉴别步骤中的工具和得到的快照数据，我们将新代码和旧代码的性能做了比较。如果解决方案效果出众，我们会彻底的进行测试以确保不引入来新的bug，那么接下来就可以击掌庆贺了，因为我们已经为其他内部测试做好了充分的准备。在大多数情况下，新的代码不见的足够快，所以我们不断迭代解决方案，知道新的代码能达到优化的目的。\n\n现在，让我们看下在英雄联盟代码库中这几个步骤的实施细节，并以最近优化的粒子系统逐步介绍。\n\n## 步骤1:鉴别\n\n拳头的工程师使用大量的分析工具来检查游戏客户端和服务器的性能。我们先查看来客户端的帧率和通过Waffles得到的高级分析信息（通过工具的特定函数获得的输出信息），这个内部工具可以让我们在内部构建的客户端与服务器保持联通。此外，Waffles还具备其他功能，如在测试过程中触发调试、检查游戏内部数据如导航分格和暂停或者减缓游戏过程。\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/Waffles.png)\nWaffles截图\n\nWaffles提供了一个实时展示界面，并提供详细的性能信息。上图是Waffles如何展现客户端性能表现的经典例子，上边图形（绿色柱状图）以毫秒为单位表示了帧率——越高的柱状图表示越低的帧率。非常慢的帧率在游戏中是可以感受得到的。柱状图下面是重要功能的分层视图，通过点击任何绿色柱状图，工程师都会看到影响该帧率的详细信息。通过这里，我们可以看出些端倪，即哪部分代码运行时导致性能较差的关键。\n\n我们使用一个简单的宏在代码库内手工检测一些重要函数来提供这份性能相关的信息。在对外发布的游戏版本中，这个宏并没有被打包编译，但在测试版本打包中，这个宏作为一个很小的class存在，它创建了一个事件，存放于配置文件缓冲区。该事件包含一个字符串识别码、一个线程ID、一个时间戳和其他必要的信息（比如它还可以存储在其生命周期内所有发生的内存配置数）。当对象超出范围后，析构器会在配置缓冲区中更新该事件自构造以来的运行时间。在随后的时间，可以输出和解析此配置文件缓冲区——理想的情况是在另一个进程进行以尽量减少对游戏本身的影响。\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/ChromeTracing1.png)\nChrome Tracing\n\n在这个例子中，我们将分析缓冲区输出到文件，并且读入到构建在Chrome浏览中可视化工具中（关于跟踪工具的更多信息，可以点击[这里](https://github.com/catapult-project/catapult/wiki/Trace-Viewer-Getting-Started)，你可以在自己的Chrome浏览器中通过在地址栏敲入\"chrome://tracing/\"进行尝试。这个扩展程序被设计用来进行网页性能分析，输入格式时JSON，所以你可以轻松的根据你自己的数据构造输入）。通过图形化后的结果，我们可以看到哪些是执行较慢的函数，或者在那里不断有大量的小函数被调用：这些都是次优代码的迹象。\n\n让我来展示详细操作：上面的视图是Chrome Tracing的视图，图中展示了客户端上两个运行的线程。上部分的是主线程，执行大多数的处理工作，底部的是粒子线程，用来执行粒子处理。每一个着色的横条均对应一个函数，横条的长度指示了其执行时间。被调用的函数由竖直栈结构展示，父函数在子函数之上。这个工具提供给我们一种非常神奇方式来可视化执行复杂度以及帧的签名时间。当我们发现一个次优代码区域，我们可以放大粒子区域以求查看更多细节。\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/ChromeTracing2.png)\nChrome Tracing放大效果图\n\n让我们放大图形中间部分。从上面的线程中我可以看到一个非常场的等待，只有当下面的粒子模拟函数执行完毕才结束。模拟功能包含大量不同函数（着色的横条）的调用。每一类都是粒子系统的更新功能，用于将位置、 方向和每个粒子在该系统中其他可见性状态进行更新。一个明显的优化方式是将模拟函数改造成多线程方式，即可运行在主线程中，也可以在粒子线程中执行，对于本例，我们仅关注与优化模拟代码本身。\n\n既然现在我们知道去何处查看性能问题，我们可以切换到样本分析。这类分析周期性的读取和存储[程序计数器](https://en.wikipedia.org/wiki/Program_counter)和运行中的进程的栈信息（可选）。一段时间后，这个信息可以给出一个随机概述，概述中描述了代码库内的耗时。较慢的函数会得到更多的样本，更有用的是，用时最长的单个函数会累积更多的样本。在这里，我们不仅可以看到哪些函数执行最慢，同时可以看到哪几行代码执行最慢。如今有很多不错的样本分析工具可供选择，从免费的[Very Sleepy](http://www.codersnotes.com/sleepy)到更多特性支持的商业软件，如Intel的[VTune](https://software.intel.com/en-us/intel-vtune-amplifier-xe)。\n\n通过在游戏客户端上运行VTune来检查粒子线程，我们可以看到如下列表中运行最慢的函数。\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/VTune.PNG)\n\nVTune中的Hot Functions\n\n上面的表格展现了一些粒子相关的函数。作为参考，最上面两个较大的函数用于为每个粒子更新矩阵和位置、方向相关的状态。举例来说，我们来看在第三和第九项AnimatedVariableWithRandomFactor<>中的Evaluate函数，函数很小（并且容易理解），但是相对而言比较耗时。\n\n## 步骤2:理解\n\n现在，我们选择了一个需要优化的函数，则需要理解这个函数要做的事情和为什么这么做的原因。在本例中，AnimatedVariables被英雄联盟美术师用来定义粒子特征是如何随着时间变化。一旦一个美术师为一个特定的粒子可见性指定关键帧值后，代码中便会插入这些数据来产生一条曲线。插值方法是线性插值或一阶或二次集成。动画曲线被大量的使用——尽在召唤师峡谷（译者注：英雄联盟的地图之一，也是最热门的地图）中就有接近40000的动画曲线——涵盖了从粒子颜色扩展到旋转速度方方面面。Evaluate函数在每场游戏中会被调用数以亿计次。此外，LOL中的粒子系统是游戏体验中很重要的一部分，所以它们的行为不能做出任何改变。\n\n这个类其实已经做过了优化，通过查表的方式，对每个timestep所需要的值都预先计算过并存储在一个数组中，所以在读取这些数值时不必再次计算，所以减少了计算的耗时。这是一个明智的选择，因为曲线的一阶和二次集成是一个昂贵的进程。为每个系统中的每个粒子上的动画变量进行这个操作会使得处理过程大大减少。\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/graphpointgraphsmaller.png)\n\n动画变量曲线的查询表\n\n在查询性能问题时，通过找到最坏的场景来放大问题往往是一个十分有用的技巧。为了模拟粒子处理减缓，我开始了一场单个玩家的游戏，游戏中有9个中期级别的电脑，并且在下路挑起了一场混乱的团战。接着，我在团战期间在客户端上运行了VTune，记录了大量的数据用于分析。这些数据给出了在Evaluate代码中的归因样本（如下图所示）。\n\n下图中我截取了第91-95行代码，为了更好的说明第90行调用Evaluate的情形。\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/VTune2.png)\n\nVTune中的分析样本\n\n对于不熟悉VTune的人来说，其实这个试图展示的就是解析期间所收集的代码。右侧的红色横条指示了命中次数，横条越长就意味着命中次数越多，而命中次数越多表示这一行执行越慢。挨着横条的时间是处理这行代码所用的预估时间。你也可以就某个特定函数的到一个准确视图来查看是什么因素“贡献”了执行缓慢。\n\n如果就红色的横条来看，第95行代码就是问题所在。但是这段代码所做的仅仅是在Vector3f中复制出拼写错误的查询表，为什么这个函数成为最慢的部分呢？为什么12字节的复制这么慢？\n\n答案在于现代CPU访问内存的方式中。CPU非常忠实的遵循了摩尔定律，每年都会提速60%，而内存速度每年的增速只有可怜的10%。\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/processor_memory_gap.jpg)\n\n图出自《计算机体系结构：量化研究方法》By John L. Hennessy, David A. Patterson, Andrea C. Arpaci-Dusseau\n\n缓存可以减小性能差距，运行英雄联盟的大多数CPU都有3级缓存，一级缓存最快但容量最小，三级缓存最慢但容量相对最大。从一级缓存读取数据只需要4个周期，而读取主内存却需要大约300个周期甚至更多。你可以在300个周期内做大量处理工作。\n\n最初查询表的解决方案的问题在于，虽然从查询表中的顺序读取值的操作是非常快的(由于硬件预取)，但是我们正在处理的颗粒并不是按照时间顺序存储，所以实际查找顺序是随机的。这通常会导致CPU等待从主存储设备读取数据时产生延迟。虽然300个周期比一级或者二级集成代价更低，但我们还是需要知道这个函数在游戏中的使用频率如何，因为毕竟这个函数在游戏中被大量的使用。\n\n为了探求真相，我们在代码中添加一些额外的内容来收集AnimatedVariables的数量和类型。结果表示，在38000个AnimatedVariables中：\n\n* 37500个是线性插值；100个是一级，400个是二级\n* 31500个仅有一个关键值；2500个有3个关键值；1500有2个或者4个关键值\n\n所以最常见的途径是针对单键值。因为代码总是生成查询表，这就产生了一个不需要传播的单数值表。也就意味着每次查询（总是返回相同值）一般会产生缓存丢失，进而导致大量的内存和CPU周期浪费。\n\n通常来讲，代码成为瓶颈一半有四个原因：\n\n* 调用频率过高\n* 算法选择不佳：如O(n^2)vsO(n)\n* 做了不必要的工作或者太频繁的执行必要的操作\n* 数据较差：或者是数据量太大，或者是数据分布和访问模式较差\n\n这里产生的问题原因不是由于代码设计不好或者开发质量导致。解决方案是好的，但是在被美术师大量使用之后，普通路径是针对单值的，而这些简单的问题在使用过程中是很不明显的。\n\n顺便说一句，我学会了作为一名程序员最重要的事情之一便是尊重你正在处理的代码。代码有可能看起很疯狂，但是这样写的目的可能是基于一个好的出发点。在没有完全理解代码如何使用和其为何设计之前不要错误的认为这些代码是丑陋愚蠢的。\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/codesoftly_comic.jpg)\n\n来自：[http://codesoftly.com/2010/03/ha-code-entropy-explained.html](http://codesoftly.com/2010/03/ha-code-entropy-explained.html)\n\n## 步骤3:迭代\n\n现在我们了解了哪部分代码执行较慢、这部分代码本意是什么和为何执行较慢，是时候开始构想解决方案了。每个常见的执行路径都是为单独变量设计，我们还知道数量少的键的线性插值非常快（在少量高速缓存中作简单的计算），所以我们需要在考虑这种情况的基础上进行重新设计。最后，我们可以回到前面罕见集成曲线的预计算查询表上。\n\n在某些情况下，当我们不使用查询表时，首先构造这些表是没有意义的，所以会释放大量意义非凡的内存（大多数表具有256个条目或者更多，每个条目可达12字节的大小，这相当于大约每张表3kb）。所以现在，我们可以使用额外的一些内存来添加缓存的条目和存储的单值的数量。\n\n之前的代码看起来是这个样子的：\n\n```c++\ntemplate <typename T>\nclass AnimatedVariable\n{\n    // <snip>\nprivate:\n    std::vector<float> mTimes;\n    std::vector<T>     mValues;\n};\n\ntemplate <typename T>\nclass AnimatedVariablePrecomputed\n{\n    // <snip>\nprivate:\n    std::vector<T> mPrecomutedValues;\n};\n\n```\nAnimatedVariablePrecomputed对象在AnimatedVariable中进行构造，从它的指定大小插值和构建一个表。Evaluate()仅在预计算对象中被调用。\n\n我们修改了一下AnimatedVariable类，现在看起来是这个样子的：\n\n```c++\ntemplate <typename T>\nclass AnimatedVariable\n{\n    // <snip>\nprivate:\n    int mNumValues;\n    T mSingleValue;\n\n    struct Key\n    {\n        float mTime;\n        T     mvalue;\n    };\n    std::vector<Key> mKeys;\n    AnimatedVariablePrecomputed<T> *mPrecomputed;\n};\n\n```\n我们添加了一个缓存值mSingleValue，和一个整数mNumValues，用于告诉我们何时才使用mSingleValue。如果mNumValues是1（即对应单值的情况），Evaluate()会直接返回mSingleValue的值——不需要其他多余的处理。你还可以注意到插入时间和值构造的Key能够减少缓存未命中的情况。\n\n指向此类的数据向量大小现在范围从24到36个字节不等，具体取决于模板类型（同时也依赖与平台，std::vector<>的大小也会不同）。\n\nEvaluate()之前的代码看起来是这样子的：\n\n```c++\ntemplate <typename T>\nT AnimatedVariablePrecomputed<T>::Evaluate(float time) const\n{\n    in numValues = mPrecomputedValues.size();\n    RIOT_ASSERT(numValues > 1);\n\n    int index = static_cast<int>(time * numValues);\n    // clamp to valid table entry to handle the 1.0 boundary or out of bounds input\n    index = Clamp(index, 0, numValues - 1);\n    return mPrecomputedValues[index];\n}\n```\n\n修改后的Evaluate()方法代码如下，这是在VTune中展示的。你可以看到三个可能的执行case：单值（红色部分），线性插值（蓝色部分）和预计算查询（绿色部分）。\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/VTune3.PNG)\n\n在VTune中展示的优化过的代码片段\n\n修改后的代码执行速度大约快了3倍：在最慢的函数列表中该函数从第三位降到了第22位！不仅执行更快，同时还降低了内存的使用，大约减少了750kb。这还不算完，不仅函数执行更快，占内存更少，同时提高了线性插值的准确度。可谓一石三鸟。\n\n这里并没有提到的内容（尽管文章已经足够长了）是我如何通过不断迭代找到了这个解决方案。我最初的尝试减少在粒子生命周期内样本表的大小。这个方案几乎有效——但有些移动较快的粒子由于样本表的减少，变的参差不齐。幸运的是，这个现象很快就被发现了，使得我依然能够将方案更换为本文中提到的方法。当然还有一些其他的代码修改，但是对于性能提高并没有直接效果，也有些代码的修改甚至造成了代码执行更慢。\n\n## 总结\n\n本文中介绍的是英雄联盟游戏代码库中代码优化的一个典型案例。虽然变动更小，但是这个改动使得内存节约了750kb，粒子线程比较之前运行快了1到2毫秒，这使得主线程执行的更快。\n\n当程序员寻求优化的时候，虽然看似显而易见，但这里提到的三个阶段都常常会被忽视。这里只是为了强调一下：\n\n1. 鉴别：分析应用并找出性能最差的部分\n2. 理解：理解代码的本意和执行缓慢的原因\n3. 迭代：基于上面两个阶段的到的成果进行代码的修改、迭代，并重新分析。重复这三个步骤直到足够快。\n\n上面提到的解决方案不见得是最快的解决方案，但至少方向是正确的——性能提升的安全路径是通过迭代改进。\n\n本文作者：Tony Albrecht\n\n\n\n\n\n\n\n","source":"_posts/英雄联盟中的随机行为优化.md","raw":"---\ntitle: 英雄联盟中的随机行为优化\ndate: 2016-03-07 13:48:24\ntags: 翻译\n---\n> 原文地址：[传送门](http://engineering.riotgames.com/news/random-acts-optimization)\n> 原创翻译，转载请注明出处\n\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/particlesheader2.png)\n\n对于像英雄联盟这样不断演进的产品的开发者而言，需要不断的致力于与系统的熵作斗争，因为他们将越来越多的内容添加到资源有限的服务器中。新的内容带了新的隐性成本——不仅是更多的实施成本，同时也包括由于创造了更多的纹理、仿真和处理造成的内存和性能成本。如果我们忽略（或者错误估算）了这些成本，则整体游戏性能不佳，可玩性减少。故障使人厌恶，延迟使人愤怒，帧率下降让人沮丧。\n<!--more-->\n\n我是致力于提高英雄联盟性能团队中的一员。我们为客户端和服务器做快照，发现问题 (性能相关和其他)，然后修复问题。同时，我们将在这个过程中学到的东西反馈其他团队，并且给他们提供工具，使他们在影响用户之前来检测并定位他们自己的性能问题。我们不断的提高英雄联盟的性能为艺术家和设计师添加新的东西提供了空间：当他们使游戏更庞大更优秀的同时，我们使之更快。\n\n这是关于我们团队如何优化英雄联盟性能系列的第一篇文章，后续我们将不断持续更新。这是一项回报丰厚的挑战，这篇文章将深入介绍我们在粒子系统中遇到的一些有趣的挑战——正如在下图中，你可以看到粒子系统在游戏中扮演了十分重要的角色。\n\n![GIF图](http://7xrgsx.com1.z0.glb.clouddn.com/TeamParticles.gif)\n\n上图是在英雄联盟游戏中高粒子密度的一个例子。\n\n优化，并不是在程序集中重写大量的代码——尽管有些时候是这样的。我们仅变更那些不仅能够提高性能，而且维护正确性的代码，如果有可能的话，还会提高代码质量。最后一项略显挑剔：任何不易读、不易维护的代码都会产生技术债务，这个我们稍后再谈。\n\n优化已有的代码库，我们采用了三个基本步骤：鉴别、理解和迭代。\n\n*步骤一：鉴别*\n\n在开始之前，我们首先需要确认哪些代码需要进行优化。即使有些代码看起来明显性能较差，但是由于其对整体性能影响极小，优化这类代码收益极少（尤其当花费在上面的时间和精力在其他方面可以做到更好的收益）。我们使用代码检测工具和采样分析器来帮助识别非性能部分的基本代码。\n\n*步骤二：理解*\n\n一旦我们得知代码库的哪部分代码性能较差，我们便会详细的查看这部分代码以求完全理解代码。理解代码意味着理解这些代码的含义及原本的目的。接着，我们就能知悉为何这些代码产生瓶颈了。\n\n*步骤三：迭代*\n\n当我们理解了为何特定部分代码执行较慢及代码本意要执行的内容，我们就有了足够的信息来设计和开发一套可行的解决方案。使用鉴别步骤中的工具和得到的快照数据，我们将新代码和旧代码的性能做了比较。如果解决方案效果出众，我们会彻底的进行测试以确保不引入来新的bug，那么接下来就可以击掌庆贺了，因为我们已经为其他内部测试做好了充分的准备。在大多数情况下，新的代码不见的足够快，所以我们不断迭代解决方案，知道新的代码能达到优化的目的。\n\n现在，让我们看下在英雄联盟代码库中这几个步骤的实施细节，并以最近优化的粒子系统逐步介绍。\n\n## 步骤1:鉴别\n\n拳头的工程师使用大量的分析工具来检查游戏客户端和服务器的性能。我们先查看来客户端的帧率和通过Waffles得到的高级分析信息（通过工具的特定函数获得的输出信息），这个内部工具可以让我们在内部构建的客户端与服务器保持联通。此外，Waffles还具备其他功能，如在测试过程中触发调试、检查游戏内部数据如导航分格和暂停或者减缓游戏过程。\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/Waffles.png)\nWaffles截图\n\nWaffles提供了一个实时展示界面，并提供详细的性能信息。上图是Waffles如何展现客户端性能表现的经典例子，上边图形（绿色柱状图）以毫秒为单位表示了帧率——越高的柱状图表示越低的帧率。非常慢的帧率在游戏中是可以感受得到的。柱状图下面是重要功能的分层视图，通过点击任何绿色柱状图，工程师都会看到影响该帧率的详细信息。通过这里，我们可以看出些端倪，即哪部分代码运行时导致性能较差的关键。\n\n我们使用一个简单的宏在代码库内手工检测一些重要函数来提供这份性能相关的信息。在对外发布的游戏版本中，这个宏并没有被打包编译，但在测试版本打包中，这个宏作为一个很小的class存在，它创建了一个事件，存放于配置文件缓冲区。该事件包含一个字符串识别码、一个线程ID、一个时间戳和其他必要的信息（比如它还可以存储在其生命周期内所有发生的内存配置数）。当对象超出范围后，析构器会在配置缓冲区中更新该事件自构造以来的运行时间。在随后的时间，可以输出和解析此配置文件缓冲区——理想的情况是在另一个进程进行以尽量减少对游戏本身的影响。\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/ChromeTracing1.png)\nChrome Tracing\n\n在这个例子中，我们将分析缓冲区输出到文件，并且读入到构建在Chrome浏览中可视化工具中（关于跟踪工具的更多信息，可以点击[这里](https://github.com/catapult-project/catapult/wiki/Trace-Viewer-Getting-Started)，你可以在自己的Chrome浏览器中通过在地址栏敲入\"chrome://tracing/\"进行尝试。这个扩展程序被设计用来进行网页性能分析，输入格式时JSON，所以你可以轻松的根据你自己的数据构造输入）。通过图形化后的结果，我们可以看到哪些是执行较慢的函数，或者在那里不断有大量的小函数被调用：这些都是次优代码的迹象。\n\n让我来展示详细操作：上面的视图是Chrome Tracing的视图，图中展示了客户端上两个运行的线程。上部分的是主线程，执行大多数的处理工作，底部的是粒子线程，用来执行粒子处理。每一个着色的横条均对应一个函数，横条的长度指示了其执行时间。被调用的函数由竖直栈结构展示，父函数在子函数之上。这个工具提供给我们一种非常神奇方式来可视化执行复杂度以及帧的签名时间。当我们发现一个次优代码区域，我们可以放大粒子区域以求查看更多细节。\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/ChromeTracing2.png)\nChrome Tracing放大效果图\n\n让我们放大图形中间部分。从上面的线程中我可以看到一个非常场的等待，只有当下面的粒子模拟函数执行完毕才结束。模拟功能包含大量不同函数（着色的横条）的调用。每一类都是粒子系统的更新功能，用于将位置、 方向和每个粒子在该系统中其他可见性状态进行更新。一个明显的优化方式是将模拟函数改造成多线程方式，即可运行在主线程中，也可以在粒子线程中执行，对于本例，我们仅关注与优化模拟代码本身。\n\n既然现在我们知道去何处查看性能问题，我们可以切换到样本分析。这类分析周期性的读取和存储[程序计数器](https://en.wikipedia.org/wiki/Program_counter)和运行中的进程的栈信息（可选）。一段时间后，这个信息可以给出一个随机概述，概述中描述了代码库内的耗时。较慢的函数会得到更多的样本，更有用的是，用时最长的单个函数会累积更多的样本。在这里，我们不仅可以看到哪些函数执行最慢，同时可以看到哪几行代码执行最慢。如今有很多不错的样本分析工具可供选择，从免费的[Very Sleepy](http://www.codersnotes.com/sleepy)到更多特性支持的商业软件，如Intel的[VTune](https://software.intel.com/en-us/intel-vtune-amplifier-xe)。\n\n通过在游戏客户端上运行VTune来检查粒子线程，我们可以看到如下列表中运行最慢的函数。\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/VTune.PNG)\n\nVTune中的Hot Functions\n\n上面的表格展现了一些粒子相关的函数。作为参考，最上面两个较大的函数用于为每个粒子更新矩阵和位置、方向相关的状态。举例来说，我们来看在第三和第九项AnimatedVariableWithRandomFactor<>中的Evaluate函数，函数很小（并且容易理解），但是相对而言比较耗时。\n\n## 步骤2:理解\n\n现在，我们选择了一个需要优化的函数，则需要理解这个函数要做的事情和为什么这么做的原因。在本例中，AnimatedVariables被英雄联盟美术师用来定义粒子特征是如何随着时间变化。一旦一个美术师为一个特定的粒子可见性指定关键帧值后，代码中便会插入这些数据来产生一条曲线。插值方法是线性插值或一阶或二次集成。动画曲线被大量的使用——尽在召唤师峡谷（译者注：英雄联盟的地图之一，也是最热门的地图）中就有接近40000的动画曲线——涵盖了从粒子颜色扩展到旋转速度方方面面。Evaluate函数在每场游戏中会被调用数以亿计次。此外，LOL中的粒子系统是游戏体验中很重要的一部分，所以它们的行为不能做出任何改变。\n\n这个类其实已经做过了优化，通过查表的方式，对每个timestep所需要的值都预先计算过并存储在一个数组中，所以在读取这些数值时不必再次计算，所以减少了计算的耗时。这是一个明智的选择，因为曲线的一阶和二次集成是一个昂贵的进程。为每个系统中的每个粒子上的动画变量进行这个操作会使得处理过程大大减少。\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/graphpointgraphsmaller.png)\n\n动画变量曲线的查询表\n\n在查询性能问题时，通过找到最坏的场景来放大问题往往是一个十分有用的技巧。为了模拟粒子处理减缓，我开始了一场单个玩家的游戏，游戏中有9个中期级别的电脑，并且在下路挑起了一场混乱的团战。接着，我在团战期间在客户端上运行了VTune，记录了大量的数据用于分析。这些数据给出了在Evaluate代码中的归因样本（如下图所示）。\n\n下图中我截取了第91-95行代码，为了更好的说明第90行调用Evaluate的情形。\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/VTune2.png)\n\nVTune中的分析样本\n\n对于不熟悉VTune的人来说，其实这个试图展示的就是解析期间所收集的代码。右侧的红色横条指示了命中次数，横条越长就意味着命中次数越多，而命中次数越多表示这一行执行越慢。挨着横条的时间是处理这行代码所用的预估时间。你也可以就某个特定函数的到一个准确视图来查看是什么因素“贡献”了执行缓慢。\n\n如果就红色的横条来看，第95行代码就是问题所在。但是这段代码所做的仅仅是在Vector3f中复制出拼写错误的查询表，为什么这个函数成为最慢的部分呢？为什么12字节的复制这么慢？\n\n答案在于现代CPU访问内存的方式中。CPU非常忠实的遵循了摩尔定律，每年都会提速60%，而内存速度每年的增速只有可怜的10%。\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/processor_memory_gap.jpg)\n\n图出自《计算机体系结构：量化研究方法》By John L. Hennessy, David A. Patterson, Andrea C. Arpaci-Dusseau\n\n缓存可以减小性能差距，运行英雄联盟的大多数CPU都有3级缓存，一级缓存最快但容量最小，三级缓存最慢但容量相对最大。从一级缓存读取数据只需要4个周期，而读取主内存却需要大约300个周期甚至更多。你可以在300个周期内做大量处理工作。\n\n最初查询表的解决方案的问题在于，虽然从查询表中的顺序读取值的操作是非常快的(由于硬件预取)，但是我们正在处理的颗粒并不是按照时间顺序存储，所以实际查找顺序是随机的。这通常会导致CPU等待从主存储设备读取数据时产生延迟。虽然300个周期比一级或者二级集成代价更低，但我们还是需要知道这个函数在游戏中的使用频率如何，因为毕竟这个函数在游戏中被大量的使用。\n\n为了探求真相，我们在代码中添加一些额外的内容来收集AnimatedVariables的数量和类型。结果表示，在38000个AnimatedVariables中：\n\n* 37500个是线性插值；100个是一级，400个是二级\n* 31500个仅有一个关键值；2500个有3个关键值；1500有2个或者4个关键值\n\n所以最常见的途径是针对单键值。因为代码总是生成查询表，这就产生了一个不需要传播的单数值表。也就意味着每次查询（总是返回相同值）一般会产生缓存丢失，进而导致大量的内存和CPU周期浪费。\n\n通常来讲，代码成为瓶颈一半有四个原因：\n\n* 调用频率过高\n* 算法选择不佳：如O(n^2)vsO(n)\n* 做了不必要的工作或者太频繁的执行必要的操作\n* 数据较差：或者是数据量太大，或者是数据分布和访问模式较差\n\n这里产生的问题原因不是由于代码设计不好或者开发质量导致。解决方案是好的，但是在被美术师大量使用之后，普通路径是针对单值的，而这些简单的问题在使用过程中是很不明显的。\n\n顺便说一句，我学会了作为一名程序员最重要的事情之一便是尊重你正在处理的代码。代码有可能看起很疯狂，但是这样写的目的可能是基于一个好的出发点。在没有完全理解代码如何使用和其为何设计之前不要错误的认为这些代码是丑陋愚蠢的。\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/codesoftly_comic.jpg)\n\n来自：[http://codesoftly.com/2010/03/ha-code-entropy-explained.html](http://codesoftly.com/2010/03/ha-code-entropy-explained.html)\n\n## 步骤3:迭代\n\n现在我们了解了哪部分代码执行较慢、这部分代码本意是什么和为何执行较慢，是时候开始构想解决方案了。每个常见的执行路径都是为单独变量设计，我们还知道数量少的键的线性插值非常快（在少量高速缓存中作简单的计算），所以我们需要在考虑这种情况的基础上进行重新设计。最后，我们可以回到前面罕见集成曲线的预计算查询表上。\n\n在某些情况下，当我们不使用查询表时，首先构造这些表是没有意义的，所以会释放大量意义非凡的内存（大多数表具有256个条目或者更多，每个条目可达12字节的大小，这相当于大约每张表3kb）。所以现在，我们可以使用额外的一些内存来添加缓存的条目和存储的单值的数量。\n\n之前的代码看起来是这个样子的：\n\n```c++\ntemplate <typename T>\nclass AnimatedVariable\n{\n    // <snip>\nprivate:\n    std::vector<float> mTimes;\n    std::vector<T>     mValues;\n};\n\ntemplate <typename T>\nclass AnimatedVariablePrecomputed\n{\n    // <snip>\nprivate:\n    std::vector<T> mPrecomutedValues;\n};\n\n```\nAnimatedVariablePrecomputed对象在AnimatedVariable中进行构造，从它的指定大小插值和构建一个表。Evaluate()仅在预计算对象中被调用。\n\n我们修改了一下AnimatedVariable类，现在看起来是这个样子的：\n\n```c++\ntemplate <typename T>\nclass AnimatedVariable\n{\n    // <snip>\nprivate:\n    int mNumValues;\n    T mSingleValue;\n\n    struct Key\n    {\n        float mTime;\n        T     mvalue;\n    };\n    std::vector<Key> mKeys;\n    AnimatedVariablePrecomputed<T> *mPrecomputed;\n};\n\n```\n我们添加了一个缓存值mSingleValue，和一个整数mNumValues，用于告诉我们何时才使用mSingleValue。如果mNumValues是1（即对应单值的情况），Evaluate()会直接返回mSingleValue的值——不需要其他多余的处理。你还可以注意到插入时间和值构造的Key能够减少缓存未命中的情况。\n\n指向此类的数据向量大小现在范围从24到36个字节不等，具体取决于模板类型（同时也依赖与平台，std::vector<>的大小也会不同）。\n\nEvaluate()之前的代码看起来是这样子的：\n\n```c++\ntemplate <typename T>\nT AnimatedVariablePrecomputed<T>::Evaluate(float time) const\n{\n    in numValues = mPrecomputedValues.size();\n    RIOT_ASSERT(numValues > 1);\n\n    int index = static_cast<int>(time * numValues);\n    // clamp to valid table entry to handle the 1.0 boundary or out of bounds input\n    index = Clamp(index, 0, numValues - 1);\n    return mPrecomputedValues[index];\n}\n```\n\n修改后的Evaluate()方法代码如下，这是在VTune中展示的。你可以看到三个可能的执行case：单值（红色部分），线性插值（蓝色部分）和预计算查询（绿色部分）。\n\n![](http://7xrgsx.com1.z0.glb.clouddn.com/VTune3.PNG)\n\n在VTune中展示的优化过的代码片段\n\n修改后的代码执行速度大约快了3倍：在最慢的函数列表中该函数从第三位降到了第22位！不仅执行更快，同时还降低了内存的使用，大约减少了750kb。这还不算完，不仅函数执行更快，占内存更少，同时提高了线性插值的准确度。可谓一石三鸟。\n\n这里并没有提到的内容（尽管文章已经足够长了）是我如何通过不断迭代找到了这个解决方案。我最初的尝试减少在粒子生命周期内样本表的大小。这个方案几乎有效——但有些移动较快的粒子由于样本表的减少，变的参差不齐。幸运的是，这个现象很快就被发现了，使得我依然能够将方案更换为本文中提到的方法。当然还有一些其他的代码修改，但是对于性能提高并没有直接效果，也有些代码的修改甚至造成了代码执行更慢。\n\n## 总结\n\n本文中介绍的是英雄联盟游戏代码库中代码优化的一个典型案例。虽然变动更小，但是这个改动使得内存节约了750kb，粒子线程比较之前运行快了1到2毫秒，这使得主线程执行的更快。\n\n当程序员寻求优化的时候，虽然看似显而易见，但这里提到的三个阶段都常常会被忽视。这里只是为了强调一下：\n\n1. 鉴别：分析应用并找出性能最差的部分\n2. 理解：理解代码的本意和执行缓慢的原因\n3. 迭代：基于上面两个阶段的到的成果进行代码的修改、迭代，并重新分析。重复这三个步骤直到足够快。\n\n上面提到的解决方案不见得是最快的解决方案，但至少方向是正确的——性能提升的安全路径是通过迭代改进。\n\n本文作者：Tony Albrecht\n\n\n\n\n\n\n\n","slug":"英雄联盟中的随机行为优化","published":1,"updated":"2016-03-07T06:41:10.956Z","_id":"cilhkfrf10000nohlu2kgx3mr","comments":1,"layout":"post","photos":[],"link":"","content":"<blockquote>\n<p>原文地址：<a href=\"http://engineering.riotgames.com/news/random-acts-optimization\" target=\"_blank\" rel=\"external\">传送门</a><br>原创翻译，转载请注明出处</p>\n</blockquote>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/particlesheader2.png\" alt=\"\"></p>\n<p>对于像英雄联盟这样不断演进的产品的开发者而言，需要不断的致力于与系统的熵作斗争，因为他们将越来越多的内容添加到资源有限的服务器中。新的内容带了新的隐性成本——不仅是更多的实施成本，同时也包括由于创造了更多的纹理、仿真和处理造成的内存和性能成本。如果我们忽略（或者错误估算）了这些成本，则整体游戏性能不佳，可玩性减少。故障使人厌恶，延迟使人愤怒，帧率下降让人沮丧。<br><a id=\"more\"></a></p>\n<p>我是致力于提高英雄联盟性能团队中的一员。我们为客户端和服务器做快照，发现问题 (性能相关和其他)，然后修复问题。同时，我们将在这个过程中学到的东西反馈其他团队，并且给他们提供工具，使他们在影响用户之前来检测并定位他们自己的性能问题。我们不断的提高英雄联盟的性能为艺术家和设计师添加新的东西提供了空间：当他们使游戏更庞大更优秀的同时，我们使之更快。</p>\n<p>这是关于我们团队如何优化英雄联盟性能系列的第一篇文章，后续我们将不断持续更新。这是一项回报丰厚的挑战，这篇文章将深入介绍我们在粒子系统中遇到的一些有趣的挑战——正如在下图中，你可以看到粒子系统在游戏中扮演了十分重要的角色。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/TeamParticles.gif\" alt=\"GIF图\"></p>\n<p>上图是在英雄联盟游戏中高粒子密度的一个例子。</p>\n<p>优化，并不是在程序集中重写大量的代码——尽管有些时候是这样的。我们仅变更那些不仅能够提高性能，而且维护正确性的代码，如果有可能的话，还会提高代码质量。最后一项略显挑剔：任何不易读、不易维护的代码都会产生技术债务，这个我们稍后再谈。</p>\n<p>优化已有的代码库，我们采用了三个基本步骤：鉴别、理解和迭代。</p>\n<p><em>步骤一：鉴别</em></p>\n<p>在开始之前，我们首先需要确认哪些代码需要进行优化。即使有些代码看起来明显性能较差，但是由于其对整体性能影响极小，优化这类代码收益极少（尤其当花费在上面的时间和精力在其他方面可以做到更好的收益）。我们使用代码检测工具和采样分析器来帮助识别非性能部分的基本代码。</p>\n<p><em>步骤二：理解</em></p>\n<p>一旦我们得知代码库的哪部分代码性能较差，我们便会详细的查看这部分代码以求完全理解代码。理解代码意味着理解这些代码的含义及原本的目的。接着，我们就能知悉为何这些代码产生瓶颈了。</p>\n<p><em>步骤三：迭代</em></p>\n<p>当我们理解了为何特定部分代码执行较慢及代码本意要执行的内容，我们就有了足够的信息来设计和开发一套可行的解决方案。使用鉴别步骤中的工具和得到的快照数据，我们将新代码和旧代码的性能做了比较。如果解决方案效果出众，我们会彻底的进行测试以确保不引入来新的bug，那么接下来就可以击掌庆贺了，因为我们已经为其他内部测试做好了充分的准备。在大多数情况下，新的代码不见的足够快，所以我们不断迭代解决方案，知道新的代码能达到优化的目的。</p>\n<p>现在，让我们看下在英雄联盟代码库中这几个步骤的实施细节，并以最近优化的粒子系统逐步介绍。</p>\n<h2 id=\"步骤1-鉴别\"><a href=\"#步骤1-鉴别\" class=\"headerlink\" title=\"步骤1:鉴别\"></a>步骤1:鉴别</h2><p>拳头的工程师使用大量的分析工具来检查游戏客户端和服务器的性能。我们先查看来客户端的帧率和通过Waffles得到的高级分析信息（通过工具的特定函数获得的输出信息），这个内部工具可以让我们在内部构建的客户端与服务器保持联通。此外，Waffles还具备其他功能，如在测试过程中触发调试、检查游戏内部数据如导航分格和暂停或者减缓游戏过程。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/Waffles.png\" alt=\"\"><br>Waffles截图</p>\n<p>Waffles提供了一个实时展示界面，并提供详细的性能信息。上图是Waffles如何展现客户端性能表现的经典例子，上边图形（绿色柱状图）以毫秒为单位表示了帧率——越高的柱状图表示越低的帧率。非常慢的帧率在游戏中是可以感受得到的。柱状图下面是重要功能的分层视图，通过点击任何绿色柱状图，工程师都会看到影响该帧率的详细信息。通过这里，我们可以看出些端倪，即哪部分代码运行时导致性能较差的关键。</p>\n<p>我们使用一个简单的宏在代码库内手工检测一些重要函数来提供这份性能相关的信息。在对外发布的游戏版本中，这个宏并没有被打包编译，但在测试版本打包中，这个宏作为一个很小的class存在，它创建了一个事件，存放于配置文件缓冲区。该事件包含一个字符串识别码、一个线程ID、一个时间戳和其他必要的信息（比如它还可以存储在其生命周期内所有发生的内存配置数）。当对象超出范围后，析构器会在配置缓冲区中更新该事件自构造以来的运行时间。在随后的时间，可以输出和解析此配置文件缓冲区——理想的情况是在另一个进程进行以尽量减少对游戏本身的影响。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/ChromeTracing1.png\" alt=\"\"><br>Chrome Tracing</p>\n<p>在这个例子中，我们将分析缓冲区输出到文件，并且读入到构建在Chrome浏览中可视化工具中（关于跟踪工具的更多信息，可以点击<a href=\"https://github.com/catapult-project/catapult/wiki/Trace-Viewer-Getting-Started\" target=\"_blank\" rel=\"external\">这里</a>，你可以在自己的Chrome浏览器中通过在地址栏敲入”chrome://tracing/“进行尝试。这个扩展程序被设计用来进行网页性能分析，输入格式时JSON，所以你可以轻松的根据你自己的数据构造输入）。通过图形化后的结果，我们可以看到哪些是执行较慢的函数，或者在那里不断有大量的小函数被调用：这些都是次优代码的迹象。</p>\n<p>让我来展示详细操作：上面的视图是Chrome Tracing的视图，图中展示了客户端上两个运行的线程。上部分的是主线程，执行大多数的处理工作，底部的是粒子线程，用来执行粒子处理。每一个着色的横条均对应一个函数，横条的长度指示了其执行时间。被调用的函数由竖直栈结构展示，父函数在子函数之上。这个工具提供给我们一种非常神奇方式来可视化执行复杂度以及帧的签名时间。当我们发现一个次优代码区域，我们可以放大粒子区域以求查看更多细节。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/ChromeTracing2.png\" alt=\"\"><br>Chrome Tracing放大效果图</p>\n<p>让我们放大图形中间部分。从上面的线程中我可以看到一个非常场的等待，只有当下面的粒子模拟函数执行完毕才结束。模拟功能包含大量不同函数（着色的横条）的调用。每一类都是粒子系统的更新功能，用于将位置、 方向和每个粒子在该系统中其他可见性状态进行更新。一个明显的优化方式是将模拟函数改造成多线程方式，即可运行在主线程中，也可以在粒子线程中执行，对于本例，我们仅关注与优化模拟代码本身。</p>\n<p>既然现在我们知道去何处查看性能问题，我们可以切换到样本分析。这类分析周期性的读取和存储<a href=\"https://en.wikipedia.org/wiki/Program_counter\" target=\"_blank\" rel=\"external\">程序计数器</a>和运行中的进程的栈信息（可选）。一段时间后，这个信息可以给出一个随机概述，概述中描述了代码库内的耗时。较慢的函数会得到更多的样本，更有用的是，用时最长的单个函数会累积更多的样本。在这里，我们不仅可以看到哪些函数执行最慢，同时可以看到哪几行代码执行最慢。如今有很多不错的样本分析工具可供选择，从免费的<a href=\"http://www.codersnotes.com/sleepy\" target=\"_blank\" rel=\"external\">Very Sleepy</a>到更多特性支持的商业软件，如Intel的<a href=\"https://software.intel.com/en-us/intel-vtune-amplifier-xe\" target=\"_blank\" rel=\"external\">VTune</a>。</p>\n<p>通过在游戏客户端上运行VTune来检查粒子线程，我们可以看到如下列表中运行最慢的函数。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/VTune.PNG\" alt=\"\"></p>\n<p>VTune中的Hot Functions</p>\n<p>上面的表格展现了一些粒子相关的函数。作为参考，最上面两个较大的函数用于为每个粒子更新矩阵和位置、方向相关的状态。举例来说，我们来看在第三和第九项AnimatedVariableWithRandomFactor&lt;&gt;中的Evaluate函数，函数很小（并且容易理解），但是相对而言比较耗时。</p>\n<h2 id=\"步骤2-理解\"><a href=\"#步骤2-理解\" class=\"headerlink\" title=\"步骤2:理解\"></a>步骤2:理解</h2><p>现在，我们选择了一个需要优化的函数，则需要理解这个函数要做的事情和为什么这么做的原因。在本例中，AnimatedVariables被英雄联盟美术师用来定义粒子特征是如何随着时间变化。一旦一个美术师为一个特定的粒子可见性指定关键帧值后，代码中便会插入这些数据来产生一条曲线。插值方法是线性插值或一阶或二次集成。动画曲线被大量的使用——尽在召唤师峡谷（译者注：英雄联盟的地图之一，也是最热门的地图）中就有接近40000的动画曲线——涵盖了从粒子颜色扩展到旋转速度方方面面。Evaluate函数在每场游戏中会被调用数以亿计次。此外，LOL中的粒子系统是游戏体验中很重要的一部分，所以它们的行为不能做出任何改变。</p>\n<p>这个类其实已经做过了优化，通过查表的方式，对每个timestep所需要的值都预先计算过并存储在一个数组中，所以在读取这些数值时不必再次计算，所以减少了计算的耗时。这是一个明智的选择，因为曲线的一阶和二次集成是一个昂贵的进程。为每个系统中的每个粒子上的动画变量进行这个操作会使得处理过程大大减少。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/graphpointgraphsmaller.png\" alt=\"\"></p>\n<p>动画变量曲线的查询表</p>\n<p>在查询性能问题时，通过找到最坏的场景来放大问题往往是一个十分有用的技巧。为了模拟粒子处理减缓，我开始了一场单个玩家的游戏，游戏中有9个中期级别的电脑，并且在下路挑起了一场混乱的团战。接着，我在团战期间在客户端上运行了VTune，记录了大量的数据用于分析。这些数据给出了在Evaluate代码中的归因样本（如下图所示）。</p>\n<p>下图中我截取了第91-95行代码，为了更好的说明第90行调用Evaluate的情形。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/VTune2.png\" alt=\"\"></p>\n<p>VTune中的分析样本</p>\n<p>对于不熟悉VTune的人来说，其实这个试图展示的就是解析期间所收集的代码。右侧的红色横条指示了命中次数，横条越长就意味着命中次数越多，而命中次数越多表示这一行执行越慢。挨着横条的时间是处理这行代码所用的预估时间。你也可以就某个特定函数的到一个准确视图来查看是什么因素“贡献”了执行缓慢。</p>\n<p>如果就红色的横条来看，第95行代码就是问题所在。但是这段代码所做的仅仅是在Vector3f中复制出拼写错误的查询表，为什么这个函数成为最慢的部分呢？为什么12字节的复制这么慢？</p>\n<p>答案在于现代CPU访问内存的方式中。CPU非常忠实的遵循了摩尔定律，每年都会提速60%，而内存速度每年的增速只有可怜的10%。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/processor_memory_gap.jpg\" alt=\"\"></p>\n<p>图出自《计算机体系结构：量化研究方法》By John L. Hennessy, David A. Patterson, Andrea C. Arpaci-Dusseau</p>\n<p>缓存可以减小性能差距，运行英雄联盟的大多数CPU都有3级缓存，一级缓存最快但容量最小，三级缓存最慢但容量相对最大。从一级缓存读取数据只需要4个周期，而读取主内存却需要大约300个周期甚至更多。你可以在300个周期内做大量处理工作。</p>\n<p>最初查询表的解决方案的问题在于，虽然从查询表中的顺序读取值的操作是非常快的(由于硬件预取)，但是我们正在处理的颗粒并不是按照时间顺序存储，所以实际查找顺序是随机的。这通常会导致CPU等待从主存储设备读取数据时产生延迟。虽然300个周期比一级或者二级集成代价更低，但我们还是需要知道这个函数在游戏中的使用频率如何，因为毕竟这个函数在游戏中被大量的使用。</p>\n<p>为了探求真相，我们在代码中添加一些额外的内容来收集AnimatedVariables的数量和类型。结果表示，在38000个AnimatedVariables中：</p>\n<ul>\n<li>37500个是线性插值；100个是一级，400个是二级</li>\n<li>31500个仅有一个关键值；2500个有3个关键值；1500有2个或者4个关键值</li>\n</ul>\n<p>所以最常见的途径是针对单键值。因为代码总是生成查询表，这就产生了一个不需要传播的单数值表。也就意味着每次查询（总是返回相同值）一般会产生缓存丢失，进而导致大量的内存和CPU周期浪费。</p>\n<p>通常来讲，代码成为瓶颈一半有四个原因：</p>\n<ul>\n<li>调用频率过高</li>\n<li>算法选择不佳：如O(n^2)vsO(n)</li>\n<li>做了不必要的工作或者太频繁的执行必要的操作</li>\n<li>数据较差：或者是数据量太大，或者是数据分布和访问模式较差</li>\n</ul>\n<p>这里产生的问题原因不是由于代码设计不好或者开发质量导致。解决方案是好的，但是在被美术师大量使用之后，普通路径是针对单值的，而这些简单的问题在使用过程中是很不明显的。</p>\n<p>顺便说一句，我学会了作为一名程序员最重要的事情之一便是尊重你正在处理的代码。代码有可能看起很疯狂，但是这样写的目的可能是基于一个好的出发点。在没有完全理解代码如何使用和其为何设计之前不要错误的认为这些代码是丑陋愚蠢的。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/codesoftly_comic.jpg\" alt=\"\"></p>\n<p>来自：<a href=\"http://codesoftly.com/2010/03/ha-code-entropy-explained.html\" target=\"_blank\" rel=\"external\">http://codesoftly.com/2010/03/ha-code-entropy-explained.html</a></p>\n<h2 id=\"步骤3-迭代\"><a href=\"#步骤3-迭代\" class=\"headerlink\" title=\"步骤3:迭代\"></a>步骤3:迭代</h2><p>现在我们了解了哪部分代码执行较慢、这部分代码本意是什么和为何执行较慢，是时候开始构想解决方案了。每个常见的执行路径都是为单独变量设计，我们还知道数量少的键的线性插值非常快（在少量高速缓存中作简单的计算），所以我们需要在考虑这种情况的基础上进行重新设计。最后，我们可以回到前面罕见集成曲线的预计算查询表上。</p>\n<p>在某些情况下，当我们不使用查询表时，首先构造这些表是没有意义的，所以会释放大量意义非凡的内存（大多数表具有256个条目或者更多，每个条目可达12字节的大小，这相当于大约每张表3kb）。所以现在，我们可以使用额外的一些内存来添加缓存的条目和存储的单值的数量。</p>\n<p>之前的代码看起来是这个样子的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> AnimatedVariable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// &lt;snip&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">float</span>&gt; mTimes;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;T&gt;     mValues;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> AnimatedVariablePrecomputed</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// &lt;snip&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;T&gt; mPrecomutedValues;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>AnimatedVariablePrecomputed对象在AnimatedVariable中进行构造，从它的指定大小插值和构建一个表。Evaluate()仅在预计算对象中被调用。</p>\n<p>我们修改了一下AnimatedVariable类，现在看起来是这个样子的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> AnimatedVariable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// &lt;snip&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mNumValues;</span><br><span class=\"line\">    T mSingleValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> Key</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> mTime;</span><br><span class=\"line\">        T     mvalue;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;Key&gt; mKeys;</span><br><span class=\"line\">    AnimatedVariablePrecomputed&lt;T&gt; *mPrecomputed;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>我们添加了一个缓存值mSingleValue，和一个整数mNumValues，用于告诉我们何时才使用mSingleValue。如果mNumValues是1（即对应单值的情况），Evaluate()会直接返回mSingleValue的值——不需要其他多余的处理。你还可以注意到插入时间和值构造的Key能够减少缓存未命中的情况。</p>\n<p>指向此类的数据向量大小现在范围从24到36个字节不等，具体取决于模板类型（同时也依赖与平台，std::vector&lt;&gt;的大小也会不同）。</p>\n<p>Evaluate()之前的代码看起来是这样子的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T AnimatedVariablePrecomputed&lt;T&gt;::Evaluate(<span class=\"keyword\">float</span> time) <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    in numValues = mPrecomputedValues.size();</span><br><span class=\"line\">    RIOT_ASSERT(numValues &gt; <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(time * numValues);</span><br><span class=\"line\">    <span class=\"comment\">// clamp to valid table entry to handle the 1.0 boundary or out of bounds input</span></span><br><span class=\"line\">    index = Clamp(index, <span class=\"number\">0</span>, numValues - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mPrecomputedValues[index];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改后的Evaluate()方法代码如下，这是在VTune中展示的。你可以看到三个可能的执行case：单值（红色部分），线性插值（蓝色部分）和预计算查询（绿色部分）。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/VTune3.PNG\" alt=\"\"></p>\n<p>在VTune中展示的优化过的代码片段</p>\n<p>修改后的代码执行速度大约快了3倍：在最慢的函数列表中该函数从第三位降到了第22位！不仅执行更快，同时还降低了内存的使用，大约减少了750kb。这还不算完，不仅函数执行更快，占内存更少，同时提高了线性插值的准确度。可谓一石三鸟。</p>\n<p>这里并没有提到的内容（尽管文章已经足够长了）是我如何通过不断迭代找到了这个解决方案。我最初的尝试减少在粒子生命周期内样本表的大小。这个方案几乎有效——但有些移动较快的粒子由于样本表的减少，变的参差不齐。幸运的是，这个现象很快就被发现了，使得我依然能够将方案更换为本文中提到的方法。当然还有一些其他的代码修改，但是对于性能提高并没有直接效果，也有些代码的修改甚至造成了代码执行更慢。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文中介绍的是英雄联盟游戏代码库中代码优化的一个典型案例。虽然变动更小，但是这个改动使得内存节约了750kb，粒子线程比较之前运行快了1到2毫秒，这使得主线程执行的更快。</p>\n<p>当程序员寻求优化的时候，虽然看似显而易见，但这里提到的三个阶段都常常会被忽视。这里只是为了强调一下：</p>\n<ol>\n<li>鉴别：分析应用并找出性能最差的部分</li>\n<li>理解：理解代码的本意和执行缓慢的原因</li>\n<li>迭代：基于上面两个阶段的到的成果进行代码的修改、迭代，并重新分析。重复这三个步骤直到足够快。</li>\n</ol>\n<p>上面提到的解决方案不见得是最快的解决方案，但至少方向是正确的——性能提升的安全路径是通过迭代改进。</p>\n<p>本文作者：Tony Albrecht</p>\n","excerpt":"<blockquote>\n<p>原文地址：<a href=\"http://engineering.riotgames.com/news/random-acts-optimization\">传送门</a><br>原创翻译，转载请注明出处</p>\n</blockquote>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/particlesheader2.png\" alt=\"\"></p>\n<p>对于像英雄联盟这样不断演进的产品的开发者而言，需要不断的致力于与系统的熵作斗争，因为他们将越来越多的内容添加到资源有限的服务器中。新的内容带了新的隐性成本——不仅是更多的实施成本，同时也包括由于创造了更多的纹理、仿真和处理造成的内存和性能成本。如果我们忽略（或者错误估算）了这些成本，则整体游戏性能不佳，可玩性减少。故障使人厌恶，延迟使人愤怒，帧率下降让人沮丧。<br>","more":"</p>\n<p>我是致力于提高英雄联盟性能团队中的一员。我们为客户端和服务器做快照，发现问题 (性能相关和其他)，然后修复问题。同时，我们将在这个过程中学到的东西反馈其他团队，并且给他们提供工具，使他们在影响用户之前来检测并定位他们自己的性能问题。我们不断的提高英雄联盟的性能为艺术家和设计师添加新的东西提供了空间：当他们使游戏更庞大更优秀的同时，我们使之更快。</p>\n<p>这是关于我们团队如何优化英雄联盟性能系列的第一篇文章，后续我们将不断持续更新。这是一项回报丰厚的挑战，这篇文章将深入介绍我们在粒子系统中遇到的一些有趣的挑战——正如在下图中，你可以看到粒子系统在游戏中扮演了十分重要的角色。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/TeamParticles.gif\" alt=\"GIF图\"></p>\n<p>上图是在英雄联盟游戏中高粒子密度的一个例子。</p>\n<p>优化，并不是在程序集中重写大量的代码——尽管有些时候是这样的。我们仅变更那些不仅能够提高性能，而且维护正确性的代码，如果有可能的话，还会提高代码质量。最后一项略显挑剔：任何不易读、不易维护的代码都会产生技术债务，这个我们稍后再谈。</p>\n<p>优化已有的代码库，我们采用了三个基本步骤：鉴别、理解和迭代。</p>\n<p><em>步骤一：鉴别</em></p>\n<p>在开始之前，我们首先需要确认哪些代码需要进行优化。即使有些代码看起来明显性能较差，但是由于其对整体性能影响极小，优化这类代码收益极少（尤其当花费在上面的时间和精力在其他方面可以做到更好的收益）。我们使用代码检测工具和采样分析器来帮助识别非性能部分的基本代码。</p>\n<p><em>步骤二：理解</em></p>\n<p>一旦我们得知代码库的哪部分代码性能较差，我们便会详细的查看这部分代码以求完全理解代码。理解代码意味着理解这些代码的含义及原本的目的。接着，我们就能知悉为何这些代码产生瓶颈了。</p>\n<p><em>步骤三：迭代</em></p>\n<p>当我们理解了为何特定部分代码执行较慢及代码本意要执行的内容，我们就有了足够的信息来设计和开发一套可行的解决方案。使用鉴别步骤中的工具和得到的快照数据，我们将新代码和旧代码的性能做了比较。如果解决方案效果出众，我们会彻底的进行测试以确保不引入来新的bug，那么接下来就可以击掌庆贺了，因为我们已经为其他内部测试做好了充分的准备。在大多数情况下，新的代码不见的足够快，所以我们不断迭代解决方案，知道新的代码能达到优化的目的。</p>\n<p>现在，让我们看下在英雄联盟代码库中这几个步骤的实施细节，并以最近优化的粒子系统逐步介绍。</p>\n<h2 id=\"步骤1-鉴别\"><a href=\"#步骤1-鉴别\" class=\"headerlink\" title=\"步骤1:鉴别\"></a>步骤1:鉴别</h2><p>拳头的工程师使用大量的分析工具来检查游戏客户端和服务器的性能。我们先查看来客户端的帧率和通过Waffles得到的高级分析信息（通过工具的特定函数获得的输出信息），这个内部工具可以让我们在内部构建的客户端与服务器保持联通。此外，Waffles还具备其他功能，如在测试过程中触发调试、检查游戏内部数据如导航分格和暂停或者减缓游戏过程。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/Waffles.png\" alt=\"\"><br>Waffles截图</p>\n<p>Waffles提供了一个实时展示界面，并提供详细的性能信息。上图是Waffles如何展现客户端性能表现的经典例子，上边图形（绿色柱状图）以毫秒为单位表示了帧率——越高的柱状图表示越低的帧率。非常慢的帧率在游戏中是可以感受得到的。柱状图下面是重要功能的分层视图，通过点击任何绿色柱状图，工程师都会看到影响该帧率的详细信息。通过这里，我们可以看出些端倪，即哪部分代码运行时导致性能较差的关键。</p>\n<p>我们使用一个简单的宏在代码库内手工检测一些重要函数来提供这份性能相关的信息。在对外发布的游戏版本中，这个宏并没有被打包编译，但在测试版本打包中，这个宏作为一个很小的class存在，它创建了一个事件，存放于配置文件缓冲区。该事件包含一个字符串识别码、一个线程ID、一个时间戳和其他必要的信息（比如它还可以存储在其生命周期内所有发生的内存配置数）。当对象超出范围后，析构器会在配置缓冲区中更新该事件自构造以来的运行时间。在随后的时间，可以输出和解析此配置文件缓冲区——理想的情况是在另一个进程进行以尽量减少对游戏本身的影响。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/ChromeTracing1.png\" alt=\"\"><br>Chrome Tracing</p>\n<p>在这个例子中，我们将分析缓冲区输出到文件，并且读入到构建在Chrome浏览中可视化工具中（关于跟踪工具的更多信息，可以点击<a href=\"https://github.com/catapult-project/catapult/wiki/Trace-Viewer-Getting-Started\">这里</a>，你可以在自己的Chrome浏览器中通过在地址栏敲入”chrome://tracing/“进行尝试。这个扩展程序被设计用来进行网页性能分析，输入格式时JSON，所以你可以轻松的根据你自己的数据构造输入）。通过图形化后的结果，我们可以看到哪些是执行较慢的函数，或者在那里不断有大量的小函数被调用：这些都是次优代码的迹象。</p>\n<p>让我来展示详细操作：上面的视图是Chrome Tracing的视图，图中展示了客户端上两个运行的线程。上部分的是主线程，执行大多数的处理工作，底部的是粒子线程，用来执行粒子处理。每一个着色的横条均对应一个函数，横条的长度指示了其执行时间。被调用的函数由竖直栈结构展示，父函数在子函数之上。这个工具提供给我们一种非常神奇方式来可视化执行复杂度以及帧的签名时间。当我们发现一个次优代码区域，我们可以放大粒子区域以求查看更多细节。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/ChromeTracing2.png\" alt=\"\"><br>Chrome Tracing放大效果图</p>\n<p>让我们放大图形中间部分。从上面的线程中我可以看到一个非常场的等待，只有当下面的粒子模拟函数执行完毕才结束。模拟功能包含大量不同函数（着色的横条）的调用。每一类都是粒子系统的更新功能，用于将位置、 方向和每个粒子在该系统中其他可见性状态进行更新。一个明显的优化方式是将模拟函数改造成多线程方式，即可运行在主线程中，也可以在粒子线程中执行，对于本例，我们仅关注与优化模拟代码本身。</p>\n<p>既然现在我们知道去何处查看性能问题，我们可以切换到样本分析。这类分析周期性的读取和存储<a href=\"https://en.wikipedia.org/wiki/Program_counter\">程序计数器</a>和运行中的进程的栈信息（可选）。一段时间后，这个信息可以给出一个随机概述，概述中描述了代码库内的耗时。较慢的函数会得到更多的样本，更有用的是，用时最长的单个函数会累积更多的样本。在这里，我们不仅可以看到哪些函数执行最慢，同时可以看到哪几行代码执行最慢。如今有很多不错的样本分析工具可供选择，从免费的<a href=\"http://www.codersnotes.com/sleepy\">Very Sleepy</a>到更多特性支持的商业软件，如Intel的<a href=\"https://software.intel.com/en-us/intel-vtune-amplifier-xe\">VTune</a>。</p>\n<p>通过在游戏客户端上运行VTune来检查粒子线程，我们可以看到如下列表中运行最慢的函数。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/VTune.PNG\" alt=\"\"></p>\n<p>VTune中的Hot Functions</p>\n<p>上面的表格展现了一些粒子相关的函数。作为参考，最上面两个较大的函数用于为每个粒子更新矩阵和位置、方向相关的状态。举例来说，我们来看在第三和第九项AnimatedVariableWithRandomFactor&lt;&gt;中的Evaluate函数，函数很小（并且容易理解），但是相对而言比较耗时。</p>\n<h2 id=\"步骤2-理解\"><a href=\"#步骤2-理解\" class=\"headerlink\" title=\"步骤2:理解\"></a>步骤2:理解</h2><p>现在，我们选择了一个需要优化的函数，则需要理解这个函数要做的事情和为什么这么做的原因。在本例中，AnimatedVariables被英雄联盟美术师用来定义粒子特征是如何随着时间变化。一旦一个美术师为一个特定的粒子可见性指定关键帧值后，代码中便会插入这些数据来产生一条曲线。插值方法是线性插值或一阶或二次集成。动画曲线被大量的使用——尽在召唤师峡谷（译者注：英雄联盟的地图之一，也是最热门的地图）中就有接近40000的动画曲线——涵盖了从粒子颜色扩展到旋转速度方方面面。Evaluate函数在每场游戏中会被调用数以亿计次。此外，LOL中的粒子系统是游戏体验中很重要的一部分，所以它们的行为不能做出任何改变。</p>\n<p>这个类其实已经做过了优化，通过查表的方式，对每个timestep所需要的值都预先计算过并存储在一个数组中，所以在读取这些数值时不必再次计算，所以减少了计算的耗时。这是一个明智的选择，因为曲线的一阶和二次集成是一个昂贵的进程。为每个系统中的每个粒子上的动画变量进行这个操作会使得处理过程大大减少。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/graphpointgraphsmaller.png\" alt=\"\"></p>\n<p>动画变量曲线的查询表</p>\n<p>在查询性能问题时，通过找到最坏的场景来放大问题往往是一个十分有用的技巧。为了模拟粒子处理减缓，我开始了一场单个玩家的游戏，游戏中有9个中期级别的电脑，并且在下路挑起了一场混乱的团战。接着，我在团战期间在客户端上运行了VTune，记录了大量的数据用于分析。这些数据给出了在Evaluate代码中的归因样本（如下图所示）。</p>\n<p>下图中我截取了第91-95行代码，为了更好的说明第90行调用Evaluate的情形。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/VTune2.png\" alt=\"\"></p>\n<p>VTune中的分析样本</p>\n<p>对于不熟悉VTune的人来说，其实这个试图展示的就是解析期间所收集的代码。右侧的红色横条指示了命中次数，横条越长就意味着命中次数越多，而命中次数越多表示这一行执行越慢。挨着横条的时间是处理这行代码所用的预估时间。你也可以就某个特定函数的到一个准确视图来查看是什么因素“贡献”了执行缓慢。</p>\n<p>如果就红色的横条来看，第95行代码就是问题所在。但是这段代码所做的仅仅是在Vector3f中复制出拼写错误的查询表，为什么这个函数成为最慢的部分呢？为什么12字节的复制这么慢？</p>\n<p>答案在于现代CPU访问内存的方式中。CPU非常忠实的遵循了摩尔定律，每年都会提速60%，而内存速度每年的增速只有可怜的10%。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/processor_memory_gap.jpg\" alt=\"\"></p>\n<p>图出自《计算机体系结构：量化研究方法》By John L. Hennessy, David A. Patterson, Andrea C. Arpaci-Dusseau</p>\n<p>缓存可以减小性能差距，运行英雄联盟的大多数CPU都有3级缓存，一级缓存最快但容量最小，三级缓存最慢但容量相对最大。从一级缓存读取数据只需要4个周期，而读取主内存却需要大约300个周期甚至更多。你可以在300个周期内做大量处理工作。</p>\n<p>最初查询表的解决方案的问题在于，虽然从查询表中的顺序读取值的操作是非常快的(由于硬件预取)，但是我们正在处理的颗粒并不是按照时间顺序存储，所以实际查找顺序是随机的。这通常会导致CPU等待从主存储设备读取数据时产生延迟。虽然300个周期比一级或者二级集成代价更低，但我们还是需要知道这个函数在游戏中的使用频率如何，因为毕竟这个函数在游戏中被大量的使用。</p>\n<p>为了探求真相，我们在代码中添加一些额外的内容来收集AnimatedVariables的数量和类型。结果表示，在38000个AnimatedVariables中：</p>\n<ul>\n<li>37500个是线性插值；100个是一级，400个是二级</li>\n<li>31500个仅有一个关键值；2500个有3个关键值；1500有2个或者4个关键值</li>\n</ul>\n<p>所以最常见的途径是针对单键值。因为代码总是生成查询表，这就产生了一个不需要传播的单数值表。也就意味着每次查询（总是返回相同值）一般会产生缓存丢失，进而导致大量的内存和CPU周期浪费。</p>\n<p>通常来讲，代码成为瓶颈一半有四个原因：</p>\n<ul>\n<li>调用频率过高</li>\n<li>算法选择不佳：如O(n^2)vsO(n)</li>\n<li>做了不必要的工作或者太频繁的执行必要的操作</li>\n<li>数据较差：或者是数据量太大，或者是数据分布和访问模式较差</li>\n</ul>\n<p>这里产生的问题原因不是由于代码设计不好或者开发质量导致。解决方案是好的，但是在被美术师大量使用之后，普通路径是针对单值的，而这些简单的问题在使用过程中是很不明显的。</p>\n<p>顺便说一句，我学会了作为一名程序员最重要的事情之一便是尊重你正在处理的代码。代码有可能看起很疯狂，但是这样写的目的可能是基于一个好的出发点。在没有完全理解代码如何使用和其为何设计之前不要错误的认为这些代码是丑陋愚蠢的。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/codesoftly_comic.jpg\" alt=\"\"></p>\n<p>来自：<a href=\"http://codesoftly.com/2010/03/ha-code-entropy-explained.html\">http://codesoftly.com/2010/03/ha-code-entropy-explained.html</a></p>\n<h2 id=\"步骤3-迭代\"><a href=\"#步骤3-迭代\" class=\"headerlink\" title=\"步骤3:迭代\"></a>步骤3:迭代</h2><p>现在我们了解了哪部分代码执行较慢、这部分代码本意是什么和为何执行较慢，是时候开始构想解决方案了。每个常见的执行路径都是为单独变量设计，我们还知道数量少的键的线性插值非常快（在少量高速缓存中作简单的计算），所以我们需要在考虑这种情况的基础上进行重新设计。最后，我们可以回到前面罕见集成曲线的预计算查询表上。</p>\n<p>在某些情况下，当我们不使用查询表时，首先构造这些表是没有意义的，所以会释放大量意义非凡的内存（大多数表具有256个条目或者更多，每个条目可达12字节的大小，这相当于大约每张表3kb）。所以现在，我们可以使用额外的一些内存来添加缓存的条目和存储的单值的数量。</p>\n<p>之前的代码看起来是这个样子的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> AnimatedVariable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// &lt;snip&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">float</span>&gt; mTimes;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;T&gt;     mValues;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> AnimatedVariablePrecomputed</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// &lt;snip&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;T&gt; mPrecomutedValues;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>AnimatedVariablePrecomputed对象在AnimatedVariable中进行构造，从它的指定大小插值和构建一个表。Evaluate()仅在预计算对象中被调用。</p>\n<p>我们修改了一下AnimatedVariable类，现在看起来是这个样子的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\"><span class=\"keyword\">class</span> AnimatedVariable</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"comment\">// &lt;snip&gt;</span></span><br><span class=\"line\"><span class=\"keyword\">private</span>:</span><br><span class=\"line\">    <span class=\"keyword\">int</span> mNumValues;</span><br><span class=\"line\">    T mSingleValue;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">struct</span> Key</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">float</span> mTime;</span><br><span class=\"line\">        T     mvalue;</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    <span class=\"built_in\">std</span>::<span class=\"built_in\">vector</span>&lt;Key&gt; mKeys;</span><br><span class=\"line\">    AnimatedVariablePrecomputed&lt;T&gt; *mPrecomputed;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p>我们添加了一个缓存值mSingleValue，和一个整数mNumValues，用于告诉我们何时才使用mSingleValue。如果mNumValues是1（即对应单值的情况），Evaluate()会直接返回mSingleValue的值——不需要其他多余的处理。你还可以注意到插入时间和值构造的Key能够减少缓存未命中的情况。</p>\n<p>指向此类的数据向量大小现在范围从24到36个字节不等，具体取决于模板类型（同时也依赖与平台，std::vector&lt;&gt;的大小也会不同）。</p>\n<p>Evaluate()之前的代码看起来是这样子的：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">template</span> &lt;<span class=\"keyword\">typename</span> T&gt;</span><br><span class=\"line\">T AnimatedVariablePrecomputed&lt;T&gt;::Evaluate(<span class=\"keyword\">float</span> time) <span class=\"keyword\">const</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    in numValues = mPrecomputedValues.size();</span><br><span class=\"line\">    RIOT_ASSERT(numValues &gt; <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> index = <span class=\"keyword\">static_cast</span>&lt;<span class=\"keyword\">int</span>&gt;(time * numValues);</span><br><span class=\"line\">    <span class=\"comment\">// clamp to valid table entry to handle the 1.0 boundary or out of bounds input</span></span><br><span class=\"line\">    index = Clamp(index, <span class=\"number\">0</span>, numValues - <span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mPrecomputedValues[index];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>修改后的Evaluate()方法代码如下，这是在VTune中展示的。你可以看到三个可能的执行case：单值（红色部分），线性插值（蓝色部分）和预计算查询（绿色部分）。</p>\n<p><img src=\"http://7xrgsx.com1.z0.glb.clouddn.com/VTune3.PNG\" alt=\"\"></p>\n<p>在VTune中展示的优化过的代码片段</p>\n<p>修改后的代码执行速度大约快了3倍：在最慢的函数列表中该函数从第三位降到了第22位！不仅执行更快，同时还降低了内存的使用，大约减少了750kb。这还不算完，不仅函数执行更快，占内存更少，同时提高了线性插值的准确度。可谓一石三鸟。</p>\n<p>这里并没有提到的内容（尽管文章已经足够长了）是我如何通过不断迭代找到了这个解决方案。我最初的尝试减少在粒子生命周期内样本表的大小。这个方案几乎有效——但有些移动较快的粒子由于样本表的减少，变的参差不齐。幸运的是，这个现象很快就被发现了，使得我依然能够将方案更换为本文中提到的方法。当然还有一些其他的代码修改，但是对于性能提高并没有直接效果，也有些代码的修改甚至造成了代码执行更慢。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>本文中介绍的是英雄联盟游戏代码库中代码优化的一个典型案例。虽然变动更小，但是这个改动使得内存节约了750kb，粒子线程比较之前运行快了1到2毫秒，这使得主线程执行的更快。</p>\n<p>当程序员寻求优化的时候，虽然看似显而易见，但这里提到的三个阶段都常常会被忽视。这里只是为了强调一下：</p>\n<ol>\n<li>鉴别：分析应用并找出性能最差的部分</li>\n<li>理解：理解代码的本意和执行缓慢的原因</li>\n<li>迭代：基于上面两个阶段的到的成果进行代码的修改、迭代，并重新分析。重复这三个步骤直到足够快。</li>\n</ol>\n<p>上面提到的解决方案不见得是最快的解决方案，但至少方向是正确的——性能提升的安全路径是通过迭代改进。</p>\n<p>本文作者：Tony Albrecht</p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cilay2b4q0000lvmztlmf5lji","tag_id":"cilay2b560001lvmzxl7rk47p","_id":"cilay2b5c0002lvmza0y2kj71"},{"post_id":"cilhkfrf10000nohlu2kgx3mr","tag_id":"cilhkfrfb0001nohl61dgbsnx","_id":"cilhkfrfe0002nohlvwsz4kg6"}],"Tag":[{"name":"杂","_id":"cilay2b560001lvmzxl7rk47p"},{"name":"翻译","_id":"cilhkfrfb0001nohl61dgbsnx"}]}}